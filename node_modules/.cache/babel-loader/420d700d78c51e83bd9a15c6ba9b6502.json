{"remainingRequest":"C:\\Users\\tedu\\Desktop\\VueJs\\xz_admin_v2\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\tedu\\Desktop\\VueJs\\xz_admin_v2\\src\\assets\\js\\jquery.flot.js","dependencies":[{"path":"C:\\Users\\tedu\\Desktop\\VueJs\\xz_admin_v2\\src\\assets\\js\\jquery.flot.js","mtime":1502243696000},{"path":"C:\\Users\\tedu\\Desktop\\VueJs\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859503174},{"path":"C:\\Users\\tedu\\Desktop\\VueJs\\xz_admin_v2\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _typeof from \"C:\\\\Users\\\\tedu\\\\Desktop\\\\VueJs\\\\xz_admin_v2\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/typeof\";\nimport \"core-js/modules/es6.function.name\";\n\n/* Javascript plotting library for jQuery, version 0.8.3.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\n*/\n// first an inline dependency, jquery.colorhelpers.js, we inline it here\n// for convenience\n\n/* Plugin for jQuery for working with colors.\n *\n * Version 1.1.\n *\n * Inspiration from jQuery color animation plugin by John Resig.\n *\n * Released under the MIT license by Ole Laursen, October 2009.\n *\n * Examples:\n *\n *   $.color.parse(\"#fff\").scale('rgb', 0.25).add('a', -0.5).toString()\n *   var c = $.color.extract($(\"#mydiv\"), 'background-color');\n *   console.log(c.r, c.g, c.b, c.a);\n *   $.color.make(100, 50, 25, 0.4).toString() // returns \"rgba(100,50,25,0.4)\"\n *\n * Note that .scale() and .add() return the same modified object\n * instead of making a new one.\n *\n * V. 1.1: Fix error handling so e.g. parsing an empty string does\n * produce a color rather than just crashing.\n */\n(function ($) {\n  $.color = {};\n\n  $.color.make = function (r, g, b, a) {\n    var o = {};\n    o.r = r || 0;\n    o.g = g || 0;\n    o.b = b || 0;\n    o.a = a != null ? a : 1;\n\n    o.add = function (c, d) {\n      for (var i = 0; i < c.length; ++i) {\n        o[c.charAt(i)] += d;\n      }\n\n      return o.normalize();\n    };\n\n    o.scale = function (c, f) {\n      for (var i = 0; i < c.length; ++i) {\n        o[c.charAt(i)] *= f;\n      }\n\n      return o.normalize();\n    };\n\n    o.toString = function () {\n      if (o.a >= 1) {\n        return \"rgb(\" + [o.r, o.g, o.b].join(\",\") + \")\";\n      } else {\n        return \"rgba(\" + [o.r, o.g, o.b, o.a].join(\",\") + \")\";\n      }\n    };\n\n    o.normalize = function () {\n      function clamp(min, value, max) {\n        return value < min ? min : value > max ? max : value;\n      }\n\n      o.r = clamp(0, parseInt(o.r), 255);\n      o.g = clamp(0, parseInt(o.g), 255);\n      o.b = clamp(0, parseInt(o.b), 255);\n      o.a = clamp(0, o.a, 1);\n      return o;\n    };\n\n    o.clone = function () {\n      return $.color.make(o.r, o.b, o.g, o.a);\n    };\n\n    return o.normalize();\n  };\n\n  $.color.extract = function (elem, css) {\n    var c;\n\n    do {\n      c = elem.css(css).toLowerCase();\n      if (c != \"\" && c != \"transparent\") break;\n      elem = elem.parent();\n    } while (elem.length && !$.nodeName(elem.get(0), \"body\"));\n\n    if (c == \"rgba(0, 0, 0, 0)\") c = \"transparent\";\n    return $.color.parse(c);\n  };\n\n  $.color.parse = function (str) {\n    var res,\n        m = $.color.make;\n    if (res = /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str)) return m(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10));\n    if (res = /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str)) return m(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10), parseFloat(res[4]));\n    if (res = /rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str)) return m(parseFloat(res[1]) * 2.55, parseFloat(res[2]) * 2.55, parseFloat(res[3]) * 2.55);\n    if (res = /rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str)) return m(parseFloat(res[1]) * 2.55, parseFloat(res[2]) * 2.55, parseFloat(res[3]) * 2.55, parseFloat(res[4]));\n    if (res = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str)) return m(parseInt(res[1], 16), parseInt(res[2], 16), parseInt(res[3], 16));\n    if (res = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str)) return m(parseInt(res[1] + res[1], 16), parseInt(res[2] + res[2], 16), parseInt(res[3] + res[3], 16));\n    var name = $.trim(str).toLowerCase();\n    if (name == \"transparent\") return m(255, 255, 255, 0);else {\n      res = lookupColors[name] || [0, 0, 0];\n      return m(res[0], res[1], res[2]);\n    }\n  };\n\n  var lookupColors = {\n    aqua: [0, 255, 255],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    black: [0, 0, 0],\n    blue: [0, 0, 255],\n    brown: [165, 42, 42],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgrey: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkviolet: [148, 0, 211],\n    fuchsia: [255, 0, 255],\n    gold: [255, 215, 0],\n    green: [0, 128, 0],\n    indigo: [75, 0, 130],\n    khaki: [240, 230, 140],\n    lightblue: [173, 216, 230],\n    lightcyan: [224, 255, 255],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    navy: [0, 0, 128],\n    olive: [128, 128, 0],\n    orange: [255, 165, 0],\n    pink: [255, 192, 203],\n    purple: [128, 0, 128],\n    violet: [128, 0, 128],\n    red: [255, 0, 0],\n    silver: [192, 192, 192],\n    white: [255, 255, 255],\n    yellow: [255, 255, 0]\n  };\n})(jQuery); // the actual Flot code\n\n\n(function ($) {\n  // Cache the prototype hasOwnProperty for faster access\n  var hasOwnProperty = Object.prototype.hasOwnProperty; // A shim to provide 'detach' to jQuery versions prior to 1.4.  Using a DOM\n  // operation produces the same effect as detach, i.e. removing the element\n  // without touching its jQuery data.\n  // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.\n\n  if (!$.fn.detach) {\n    $.fn.detach = function () {\n      return this.each(function () {\n        if (this.parentNode) {\n          this.parentNode.removeChild(this);\n        }\n      });\n    };\n  } ///////////////////////////////////////////////////////////////////////////\n  // The Canvas object is a wrapper around an HTML5 <canvas> tag.\n  //\n  // @constructor\n  // @param {string} cls List of classes to apply to the canvas.\n  // @param {element} container Element onto which to append the canvas.\n  //\n  // Requiring a container is a little iffy, but unfortunately canvas\n  // operations don't work unless the canvas is attached to the DOM.\n\n\n  function Canvas(cls, container) {\n    var element = container.children(\".\" + cls)[0];\n\n    if (element == null) {\n      element = document.createElement(\"canvas\");\n      element.className = cls;\n      $(element).css({\n        direction: \"ltr\",\n        position: \"absolute\",\n        left: 0,\n        top: 0\n      }).appendTo(container); // If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas\n\n      if (!element.getContext) {\n        if (window.G_vmlCanvasManager) {\n          element = window.G_vmlCanvasManager.initElement(element);\n        } else {\n          throw new Error(\"Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.\");\n        }\n      }\n    }\n\n    this.element = element;\n    var context = this.context = element.getContext(\"2d\"); // Determine the screen's ratio of physical to device-independent\n    // pixels.  This is the ratio between the canvas width that the browser\n    // advertises and the number of pixels actually present in that space.\n    // The iPhone 4, for example, has a device-independent width of 320px,\n    // but its screen is actually 640px wide.  It therefore has a pixel\n    // ratio of 2, while most normal devices have a ratio of 1.\n\n    var devicePixelRatio = window.devicePixelRatio || 1,\n        backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    this.pixelRatio = devicePixelRatio / backingStoreRatio; // Size the canvas to match the internal dimensions of its container\n\n    this.resize(container.width(), container.height()); // Collection of HTML div layers for text overlaid onto the canvas\n\n    this.textContainer = null;\n    this.text = {}; // Cache of text fragments and metrics, so we can avoid expensively\n    // re-calculating them when the plot is re-rendered in a loop.\n\n    this._textCache = {};\n  } // Resizes the canvas to the given dimensions.\n  //\n  // @param {number} width New width of the canvas, in pixels.\n  // @param {number} width New height of the canvas, in pixels.\n\n\n  Canvas.prototype.resize = function (width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid dimensions for plot, width = \" + width + \", height = \" + height);\n    }\n\n    var element = this.element,\n        context = this.context,\n        pixelRatio = this.pixelRatio; // Resize the canvas, increasing its density based on the display's\n    // pixel ratio; basically giving it more pixels without increasing the\n    // size of its element, to take advantage of the fact that retina\n    // displays have that many more pixels in the same advertised space.\n    // Resizing should reset the state (excanvas seems to be buggy though)\n\n    if (this.width != width) {\n      element.width = width * pixelRatio;\n      element.style.width = width + \"px\";\n      this.width = width;\n    }\n\n    if (this.height != height) {\n      element.height = height * pixelRatio;\n      element.style.height = height + \"px\";\n      this.height = height;\n    } // Save the context, so we can reset in case we get replotted.  The\n    // restore ensure that we're really back at the initial state, and\n    // should be safe even if we haven't saved the initial state yet.\n\n\n    context.restore();\n    context.save(); // Scale the coordinate space to match the display density; so even though we\n    // may have twice as many pixels, we still want lines and other drawing to\n    // appear at the same size; the extra pixels will just make them crisper.\n\n    context.scale(pixelRatio, pixelRatio);\n  }; // Clears the entire canvas area, not including any overlaid HTML text\n\n\n  Canvas.prototype.clear = function () {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }; // Finishes rendering the canvas, including managing the text overlay.\n\n\n  Canvas.prototype.render = function () {\n    var cache = this._textCache; // For each text layer, add elements marked as active that haven't\n    // already been rendered, and remove those that are no longer active.\n\n    for (var layerKey in cache) {\n      if (hasOwnProperty.call(cache, layerKey)) {\n        var layer = this.getTextLayer(layerKey),\n            layerCache = cache[layerKey];\n        layer.hide();\n\n        for (var styleKey in layerCache) {\n          if (hasOwnProperty.call(layerCache, styleKey)) {\n            var styleCache = layerCache[styleKey];\n\n            for (var key in styleCache) {\n              if (hasOwnProperty.call(styleCache, key)) {\n                var positions = styleCache[key].positions;\n\n                for (var i = 0, position; position = positions[i]; i++) {\n                  if (position.active) {\n                    if (!position.rendered) {\n                      layer.append(position.element);\n                      position.rendered = true;\n                    }\n                  } else {\n                    positions.splice(i--, 1);\n\n                    if (position.rendered) {\n                      position.element.detach();\n                    }\n                  }\n                }\n\n                if (positions.length == 0) {\n                  delete styleCache[key];\n                }\n              }\n            }\n          }\n        }\n\n        layer.show();\n      }\n    }\n  }; // Creates (if necessary) and returns the text overlay container.\n  //\n  // @param {string} classes String of space-separated CSS classes used to\n  //     uniquely identify the text layer.\n  // @return {object} The jQuery-wrapped text-layer div.\n\n\n  Canvas.prototype.getTextLayer = function (classes) {\n    var layer = this.text[classes]; // Create the text layer if it doesn't exist\n\n    if (layer == null) {\n      // Create the text layer container, if it doesn't exist\n      if (this.textContainer == null) {\n        this.textContainer = $(\"<div class='flot-text'></div>\").css({\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          'font-size': \"smaller\",\n          color: \"#545454\"\n        }).insertAfter(this.element);\n      }\n\n      layer = this.text[classes] = $(\"<div></div>\").addClass(classes).css({\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0\n      }).appendTo(this.textContainer);\n    }\n\n    return layer;\n  }; // Creates (if necessary) and returns a text info object.\n  //\n  // The object looks like this:\n  //\n  // {\n  //     width: Width of the text's wrapper div.\n  //     height: Height of the text's wrapper div.\n  //     element: The jQuery-wrapped HTML div containing the text.\n  //     positions: Array of positions at which this text is drawn.\n  // }\n  //\n  // The positions array contains objects that look like this:\n  //\n  // {\n  //     active: Flag indicating whether the text should be visible.\n  //     rendered: Flag indicating whether the text is currently visible.\n  //     element: The jQuery-wrapped HTML div containing the text.\n  //     x: X coordinate at which to draw the text.\n  //     y: Y coordinate at which to draw the text.\n  // }\n  //\n  // Each position after the first receives a clone of the original element.\n  //\n  // The idea is that that the width, height, and general 'identity' of the\n  // text is constant no matter where it is placed; the placements are a\n  // secondary property.\n  //\n  // Canvas maintains a cache of recently-used text info objects; getTextInfo\n  // either returns the cached element or creates a new entry.\n  //\n  // @param {string} layer A string of space-separated CSS classes uniquely\n  //     identifying the layer containing this text.\n  // @param {string} text Text string to retrieve info for.\n  // @param {(string|object)=} font Either a string of space-separated CSS\n  //     classes or a font-spec object, defining the text's font and style.\n  // @param {number=} angle Angle at which to rotate the text, in degrees.\n  //     Angle is currently unused, it will be implemented in the future.\n  // @param {number=} width Maximum width of the text before it wraps.\n  // @return {object} a text info object.\n\n\n  Canvas.prototype.getTextInfo = function (layer, text, font, angle, width) {\n    var textStyle, layerCache, styleCache, info; // Cast the value to a string, in case we were given a number or such\n\n    text = \"\" + text; // If the font is a font-spec object, generate a CSS font definition\n\n    if (_typeof(font) === \"object\") {\n      textStyle = font.style + \" \" + font.variant + \" \" + font.weight + \" \" + font.size + \"px/\" + font.lineHeight + \"px \" + font.family;\n    } else {\n      textStyle = font;\n    } // Retrieve (or create) the cache for the text's layer and styles\n\n\n    layerCache = this._textCache[layer];\n\n    if (layerCache == null) {\n      layerCache = this._textCache[layer] = {};\n    }\n\n    styleCache = layerCache[textStyle];\n\n    if (styleCache == null) {\n      styleCache = layerCache[textStyle] = {};\n    }\n\n    info = styleCache[text]; // If we can't find a matching element in our cache, create a new one\n\n    if (info == null) {\n      var element = $(\"<div></div>\").html(text).css({\n        position: \"absolute\",\n        'max-width': width,\n        top: -9999\n      }).appendTo(this.getTextLayer(layer));\n\n      if (_typeof(font) === \"object\") {\n        element.css({\n          font: textStyle,\n          color: font.color\n        });\n      } else if (typeof font === \"string\") {\n        element.addClass(font);\n      }\n\n      info = styleCache[text] = {\n        width: element.outerWidth(true),\n        height: element.outerHeight(true),\n        element: element,\n        positions: []\n      };\n      element.detach();\n    }\n\n    return info;\n  }; // Adds a text string to the canvas text overlay.\n  //\n  // The text isn't drawn immediately; it is marked as rendering, which will\n  // result in its addition to the canvas on the next render pass.\n  //\n  // @param {string} layer A string of space-separated CSS classes uniquely\n  //     identifying the layer containing this text.\n  // @param {number} x X coordinate at which to draw the text.\n  // @param {number} y Y coordinate at which to draw the text.\n  // @param {string} text Text string to draw.\n  // @param {(string|object)=} font Either a string of space-separated CSS\n  //     classes or a font-spec object, defining the text's font and style.\n  // @param {number=} angle Angle at which to rotate the text, in degrees.\n  //     Angle is currently unused, it will be implemented in the future.\n  // @param {number=} width Maximum width of the text before it wraps.\n  // @param {string=} halign Horizontal alignment of the text; either \"left\",\n  //     \"center\" or \"right\".\n  // @param {string=} valign Vertical alignment of the text; either \"top\",\n  //     \"middle\" or \"bottom\".\n\n\n  Canvas.prototype.addText = function (layer, x, y, text, font, angle, width, halign, valign) {\n    var info = this.getTextInfo(layer, text, font, angle, width),\n        positions = info.positions; // Tweak the div's position to match the text's alignment\n\n    if (halign == \"center\") {\n      x -= info.width / 2;\n    } else if (halign == \"right\") {\n      x -= info.width;\n    }\n\n    if (valign == \"middle\") {\n      y -= info.height / 2;\n    } else if (valign == \"bottom\") {\n      y -= info.height;\n    } // Determine whether this text already exists at this position.\n    // If so, mark it for inclusion in the next render pass.\n\n\n    for (var i = 0, position; position = positions[i]; i++) {\n      if (position.x == x && position.y == y) {\n        position.active = true;\n        return;\n      }\n    } // If the text doesn't exist at this position, create a new entry\n    // For the very first position we'll re-use the original element,\n    // while for subsequent ones we'll clone it.\n\n\n    position = {\n      active: true,\n      rendered: false,\n      element: positions.length ? info.element.clone() : info.element,\n      x: x,\n      y: y\n    };\n    positions.push(position); // Move the element to its final position within the container\n\n    position.element.css({\n      top: Math.round(y),\n      left: Math.round(x),\n      'text-align': halign // In case the text wraps\n\n    });\n  }; // Removes one or more text strings from the canvas text overlay.\n  //\n  // If no parameters are given, all text within the layer is removed.\n  //\n  // Note that the text is not immediately removed; it is simply marked as\n  // inactive, which will result in its removal on the next render pass.\n  // This avoids the performance penalty for 'clear and redraw' behavior,\n  // where we potentially get rid of all text on a layer, but will likely\n  // add back most or all of it later, as when redrawing axes, for example.\n  //\n  // @param {string} layer A string of space-separated CSS classes uniquely\n  //     identifying the layer containing this text.\n  // @param {number=} x X coordinate of the text.\n  // @param {number=} y Y coordinate of the text.\n  // @param {string=} text Text string to remove.\n  // @param {(string|object)=} font Either a string of space-separated CSS\n  //     classes or a font-spec object, defining the text's font and style.\n  // @param {number=} angle Angle at which the text is rotated, in degrees.\n  //     Angle is currently unused, it will be implemented in the future.\n\n\n  Canvas.prototype.removeText = function (layer, x, y, text, font, angle) {\n    if (text == null) {\n      var layerCache = this._textCache[layer];\n\n      if (layerCache != null) {\n        for (var styleKey in layerCache) {\n          if (hasOwnProperty.call(layerCache, styleKey)) {\n            var styleCache = layerCache[styleKey];\n\n            for (var key in styleCache) {\n              if (hasOwnProperty.call(styleCache, key)) {\n                var positions = styleCache[key].positions;\n\n                for (var i = 0, position; position = positions[i]; i++) {\n                  position.active = false;\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      var positions = this.getTextInfo(layer, text, font, angle).positions;\n\n      for (var i = 0, position; position = positions[i]; i++) {\n        if (position.x == x && position.y == y) {\n          position.active = false;\n        }\n      }\n    }\n  }; ///////////////////////////////////////////////////////////////////////////\n  // The top-level container for the entire plot.\n\n\n  function Plot(placeholder, data_, options_, plugins) {\n    // data is on the form:\n    //   [ series1, series2 ... ]\n    // where series is either just the data as [ [x1, y1], [x2, y2], ... ]\n    // or { data: [ [x1, y1], [x2, y2], ... ], label: \"some label\", ... }\n    var series = [],\n        options = {\n      // the color theme used for graphs\n      colors: [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"],\n      legend: {\n        show: true,\n        noColumns: 1,\n        // number of colums in legend table\n        labelFormatter: null,\n        // fn: string -> string\n        labelBoxBorderColor: \"#ccc\",\n        // border color for the little label boxes\n        container: null,\n        // container (as jQuery object) to put legend in, null means default on top of graph\n        position: \"ne\",\n        // position of default legend container within plot\n        margin: 5,\n        // distance from grid edge to default legend container within plot\n        backgroundColor: null,\n        // null means auto-detect\n        backgroundOpacity: 0.85,\n        // set to 0 to avoid background\n        sorted: null // default to no legend sorting\n\n      },\n      xaxis: {\n        show: null,\n        // null = auto-detect, true = always, false = never\n        position: \"bottom\",\n        // or \"top\"\n        mode: null,\n        // null or \"time\"\n        font: null,\n        // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: \"italic\", weight: \"bold\", family: \"sans-serif\", variant: \"small-caps\" }\n        color: null,\n        // base color, labels, ticks\n        tickColor: null,\n        // possibly different color of ticks, e.g. \"rgba(0,0,0,0.15)\"\n        transform: null,\n        // null or f: number -> number to transform axis\n        inverseTransform: null,\n        // if transform is set, this should be the inverse function\n        min: null,\n        // min. value to show, null means set automatically\n        max: null,\n        // max. value to show, null means set automatically\n        autoscaleMargin: null,\n        // margin in % to add if auto-setting min/max\n        ticks: null,\n        // either [1, 3] or [[1, \"a\"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks\n        tickFormatter: null,\n        // fn: number -> string\n        labelWidth: null,\n        // size of tick labels in pixels\n        labelHeight: null,\n        reserveSpace: null,\n        // whether to reserve space even if axis isn't shown\n        tickLength: null,\n        // size in pixels of ticks, or \"full\" for whole line\n        alignTicksWithAxis: null,\n        // axis number or null for no sync\n        tickDecimals: null,\n        // no. of decimals, null means auto\n        tickSize: null,\n        // number or [number, \"unit\"]\n        minTickSize: null // number or [number, \"unit\"]\n\n      },\n      yaxis: {\n        autoscaleMargin: 0.02,\n        position: \"left\" // or \"right\"\n\n      },\n      xaxes: [],\n      yaxes: [],\n      series: {\n        points: {\n          show: false,\n          radius: 3,\n          lineWidth: 2,\n          // in pixels\n          fill: true,\n          fillColor: \"#ffffff\",\n          symbol: \"circle\" // or callback\n\n        },\n        lines: {\n          // we don't put in show: false so we can see\n          // whether lines were actively disabled\n          lineWidth: 2,\n          // in pixels\n          fill: false,\n          fillColor: null,\n          steps: false // Omit 'zero', so we can later default its value to\n          // match that of the 'fill' option.\n\n        },\n        bars: {\n          show: false,\n          lineWidth: 2,\n          // in pixels\n          barWidth: 1,\n          // in units of the x axis\n          fill: true,\n          fillColor: null,\n          align: \"left\",\n          // \"left\", \"right\", or \"center\"\n          horizontal: false,\n          zero: true\n        },\n        shadowSize: 3,\n        highlightColor: null\n      },\n      grid: {\n        show: true,\n        aboveData: false,\n        color: \"#545454\",\n        // primary color used for outline and labels\n        backgroundColor: null,\n        // null for transparent, else color\n        borderColor: null,\n        // set if different from the grid color\n        tickColor: null,\n        // color for the ticks, e.g. \"rgba(0,0,0,0.15)\"\n        margin: 0,\n        // distance from the canvas edge to the grid\n        labelMargin: 5,\n        // in pixels\n        axisMargin: 8,\n        // in pixels\n        borderWidth: 2,\n        // in pixels\n        minBorderMargin: null,\n        // in pixels, null means taken from points radius\n        markings: null,\n        // array of ranges or fn: axes -> array of ranges\n        markingsColor: \"#f4f4f4\",\n        markingsLineWidth: 2,\n        // interactive stuff\n        clickable: false,\n        hoverable: false,\n        autoHighlight: true,\n        // highlight in case mouse is near\n        mouseActiveRadius: 10 // how far the mouse can be away to activate an item\n\n      },\n      interaction: {\n        redrawOverlayInterval: 1000 / 60 // time between updates, -1 means in same flow\n\n      },\n      hooks: {}\n    },\n        surface = null,\n        // the canvas for the plot itself\n    overlay = null,\n        // canvas for interactive stuff on top of plot\n    eventHolder = null,\n        // jQuery object that events should be bound to\n    ctx = null,\n        octx = null,\n        xaxes = [],\n        yaxes = [],\n        plotOffset = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    },\n        plotWidth = 0,\n        plotHeight = 0,\n        hooks = {\n      processOptions: [],\n      processRawData: [],\n      processDatapoints: [],\n      processOffset: [],\n      drawBackground: [],\n      drawSeries: [],\n      draw: [],\n      bindEvents: [],\n      drawOverlay: [],\n      shutdown: []\n    },\n        plot = this; // public functions\n\n    plot.setData = setData;\n    plot.setupGrid = setupGrid;\n    plot.draw = draw;\n\n    plot.getPlaceholder = function () {\n      return placeholder;\n    };\n\n    plot.getCanvas = function () {\n      return surface.element;\n    };\n\n    plot.getPlotOffset = function () {\n      return plotOffset;\n    };\n\n    plot.width = function () {\n      return plotWidth;\n    };\n\n    plot.height = function () {\n      return plotHeight;\n    };\n\n    plot.offset = function () {\n      var o = eventHolder.offset();\n      o.left += plotOffset.left;\n      o.top += plotOffset.top;\n      return o;\n    };\n\n    plot.getData = function () {\n      return series;\n    };\n\n    plot.getAxes = function () {\n      var res = {},\n          i;\n      $.each(xaxes.concat(yaxes), function (_, axis) {\n        if (axis) res[axis.direction + (axis.n != 1 ? axis.n : \"\") + \"axis\"] = axis;\n      });\n      return res;\n    };\n\n    plot.getXAxes = function () {\n      return xaxes;\n    };\n\n    plot.getYAxes = function () {\n      return yaxes;\n    };\n\n    plot.c2p = canvasToAxisCoords;\n    plot.p2c = axisToCanvasCoords;\n\n    plot.getOptions = function () {\n      return options;\n    };\n\n    plot.highlight = highlight;\n    plot.unhighlight = unhighlight;\n    plot.triggerRedrawOverlay = triggerRedrawOverlay;\n\n    plot.pointOffset = function (point) {\n      return {\n        left: parseInt(xaxes[axisNumber(point, \"x\") - 1].p2c(+point.x) + plotOffset.left, 10),\n        top: parseInt(yaxes[axisNumber(point, \"y\") - 1].p2c(+point.y) + plotOffset.top, 10)\n      };\n    };\n\n    plot.shutdown = shutdown;\n\n    plot.destroy = function () {\n      shutdown();\n      placeholder.removeData(\"plot\").empty();\n      series = [];\n      options = null;\n      surface = null;\n      overlay = null;\n      eventHolder = null;\n      ctx = null;\n      octx = null;\n      xaxes = [];\n      yaxes = [];\n      hooks = null;\n      highlights = [];\n      plot = null;\n    };\n\n    plot.resize = function () {\n      var width = placeholder.width(),\n          height = placeholder.height();\n      surface.resize(width, height);\n      overlay.resize(width, height);\n    }; // public attributes\n\n\n    plot.hooks = hooks; // initialize\n\n    initPlugins(plot);\n    parseOptions(options_);\n    setupCanvases();\n    setData(data_);\n    setupGrid();\n    draw();\n    bindEvents();\n\n    function executeHooks(hook, args) {\n      args = [plot].concat(args);\n\n      for (var i = 0; i < hook.length; ++i) {\n        hook[i].apply(this, args);\n      }\n    }\n\n    function initPlugins() {\n      // References to key classes, allowing plugins to modify them\n      var classes = {\n        Canvas: Canvas\n      };\n\n      for (var i = 0; i < plugins.length; ++i) {\n        var p = plugins[i];\n        p.init(plot, classes);\n        if (p.options) $.extend(true, options, p.options);\n      }\n    }\n\n    function parseOptions(opts) {\n      $.extend(true, options, opts); // $.extend merges arrays, rather than replacing them.  When less\n      // colors are provided than the size of the default palette, we\n      // end up with those colors plus the remaining defaults, which is\n      // not expected behavior; avoid it by replacing them here.\n\n      if (opts && opts.colors) {\n        options.colors = opts.colors;\n      }\n\n      if (options.xaxis.color == null) options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n      if (options.yaxis.color == null) options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n      if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility\n        options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;\n      if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility\n        options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;\n      if (options.grid.borderColor == null) options.grid.borderColor = options.grid.color;\n      if (options.grid.tickColor == null) options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString(); // Fill in defaults for axis options, including any unspecified\n      // font-spec fields, if a font-spec was provided.\n      // If no x/y axis options were provided, create one of each anyway,\n      // since the rest of the code assumes that they exist.\n\n      var i,\n          axisOptions,\n          axisCount,\n          fontSize = placeholder.css(\"font-size\"),\n          fontSizeDefault = fontSize ? +fontSize.replace(\"px\", \"\") : 13,\n          fontDefaults = {\n        style: placeholder.css(\"font-style\"),\n        size: Math.round(0.8 * fontSizeDefault),\n        variant: placeholder.css(\"font-variant\"),\n        weight: placeholder.css(\"font-weight\"),\n        family: placeholder.css(\"font-family\")\n      };\n      axisCount = options.xaxes.length || 1;\n\n      for (i = 0; i < axisCount; ++i) {\n        axisOptions = options.xaxes[i];\n\n        if (axisOptions && !axisOptions.tickColor) {\n          axisOptions.tickColor = axisOptions.color;\n        }\n\n        axisOptions = $.extend(true, {}, options.xaxis, axisOptions);\n        options.xaxes[i] = axisOptions;\n\n        if (axisOptions.font) {\n          axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n\n          if (!axisOptions.font.color) {\n            axisOptions.font.color = axisOptions.color;\n          }\n\n          if (!axisOptions.font.lineHeight) {\n            axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n          }\n        }\n      }\n\n      axisCount = options.yaxes.length || 1;\n\n      for (i = 0; i < axisCount; ++i) {\n        axisOptions = options.yaxes[i];\n\n        if (axisOptions && !axisOptions.tickColor) {\n          axisOptions.tickColor = axisOptions.color;\n        }\n\n        axisOptions = $.extend(true, {}, options.yaxis, axisOptions);\n        options.yaxes[i] = axisOptions;\n\n        if (axisOptions.font) {\n          axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n\n          if (!axisOptions.font.color) {\n            axisOptions.font.color = axisOptions.color;\n          }\n\n          if (!axisOptions.font.lineHeight) {\n            axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n          }\n        }\n      } // backwards compatibility, to be removed in future\n\n\n      if (options.xaxis.noTicks && options.xaxis.ticks == null) options.xaxis.ticks = options.xaxis.noTicks;\n      if (options.yaxis.noTicks && options.yaxis.ticks == null) options.yaxis.ticks = options.yaxis.noTicks;\n\n      if (options.x2axis) {\n        options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);\n        options.xaxes[1].position = \"top\"; // Override the inherit to allow the axis to auto-scale\n\n        if (options.x2axis.min == null) {\n          options.xaxes[1].min = null;\n        }\n\n        if (options.x2axis.max == null) {\n          options.xaxes[1].max = null;\n        }\n      }\n\n      if (options.y2axis) {\n        options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);\n        options.yaxes[1].position = \"right\"; // Override the inherit to allow the axis to auto-scale\n\n        if (options.y2axis.min == null) {\n          options.yaxes[1].min = null;\n        }\n\n        if (options.y2axis.max == null) {\n          options.yaxes[1].max = null;\n        }\n      }\n\n      if (options.grid.coloredAreas) options.grid.markings = options.grid.coloredAreas;\n      if (options.grid.coloredAreasColor) options.grid.markingsColor = options.grid.coloredAreasColor;\n      if (options.lines) $.extend(true, options.series.lines, options.lines);\n      if (options.points) $.extend(true, options.series.points, options.points);\n      if (options.bars) $.extend(true, options.series.bars, options.bars);\n      if (options.shadowSize != null) options.series.shadowSize = options.shadowSize;\n      if (options.highlightColor != null) options.series.highlightColor = options.highlightColor; // save options on axes for future reference\n\n      for (i = 0; i < options.xaxes.length; ++i) {\n        getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];\n      }\n\n      for (i = 0; i < options.yaxes.length; ++i) {\n        getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];\n      } // add hooks from options\n\n\n      for (var n in hooks) {\n        if (options.hooks[n] && options.hooks[n].length) hooks[n] = hooks[n].concat(options.hooks[n]);\n      }\n\n      executeHooks(hooks.processOptions, [options]);\n    }\n\n    function setData(d) {\n      series = parseData(d);\n      fillInSeriesOptions();\n      processData();\n    }\n\n    function parseData(d) {\n      var res = [];\n\n      for (var i = 0; i < d.length; ++i) {\n        var s = $.extend(true, {}, options.series);\n\n        if (d[i].data != null) {\n          s.data = d[i].data; // move the data instead of deep-copy\n\n          delete d[i].data;\n          $.extend(true, s, d[i]);\n          d[i].data = s.data;\n        } else s.data = d[i];\n\n        res.push(s);\n      }\n\n      return res;\n    }\n\n    function axisNumber(obj, coord) {\n      var a = obj[coord + \"axis\"];\n      if (_typeof(a) == \"object\") // if we got a real axis, extract number\n        a = a.n;\n      if (typeof a != \"number\") a = 1; // default to first axis\n\n      return a;\n    }\n\n    function allAxes() {\n      // return flat array without annoying null entries\n      return $.grep(xaxes.concat(yaxes), function (a) {\n        return a;\n      });\n    }\n\n    function canvasToAxisCoords(pos) {\n      // return an object with x/y corresponding to all used axes\n      var res = {},\n          i,\n          axis;\n\n      for (i = 0; i < xaxes.length; ++i) {\n        axis = xaxes[i];\n        if (axis && axis.used) res[\"x\" + axis.n] = axis.c2p(pos.left);\n      }\n\n      for (i = 0; i < yaxes.length; ++i) {\n        axis = yaxes[i];\n        if (axis && axis.used) res[\"y\" + axis.n] = axis.c2p(pos.top);\n      }\n\n      if (res.x1 !== undefined) res.x = res.x1;\n      if (res.y1 !== undefined) res.y = res.y1;\n      return res;\n    }\n\n    function axisToCanvasCoords(pos) {\n      // get canvas coords from the first pair of x/y found in pos\n      var res = {},\n          i,\n          axis,\n          key;\n\n      for (i = 0; i < xaxes.length; ++i) {\n        axis = xaxes[i];\n\n        if (axis && axis.used) {\n          key = \"x\" + axis.n;\n          if (pos[key] == null && axis.n == 1) key = \"x\";\n\n          if (pos[key] != null) {\n            res.left = axis.p2c(pos[key]);\n            break;\n          }\n        }\n      }\n\n      for (i = 0; i < yaxes.length; ++i) {\n        axis = yaxes[i];\n\n        if (axis && axis.used) {\n          key = \"y\" + axis.n;\n          if (pos[key] == null && axis.n == 1) key = \"y\";\n\n          if (pos[key] != null) {\n            res.top = axis.p2c(pos[key]);\n            break;\n          }\n        }\n      }\n\n      return res;\n    }\n\n    function getOrCreateAxis(axes, number) {\n      if (!axes[number - 1]) axes[number - 1] = {\n        n: number,\n        // save the number for future reference\n        direction: axes == xaxes ? \"x\" : \"y\",\n        options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)\n      };\n      return axes[number - 1];\n    }\n\n    function fillInSeriesOptions() {\n      var neededColors = series.length,\n          maxIndex = -1,\n          i; // Subtract the number of series that already have fixed colors or\n      // color indexes from the number that we still need to generate.\n\n      for (i = 0; i < series.length; ++i) {\n        var sc = series[i].color;\n\n        if (sc != null) {\n          neededColors--;\n\n          if (typeof sc == \"number\" && sc > maxIndex) {\n            maxIndex = sc;\n          }\n        }\n      } // If any of the series have fixed color indexes, then we need to\n      // generate at least as many colors as the highest index.\n\n\n      if (neededColors <= maxIndex) {\n        neededColors = maxIndex + 1;\n      } // Generate all the colors, using first the option colors and then\n      // variations on those colors once they're exhausted.\n\n\n      var c,\n          colors = [],\n          colorPool = options.colors,\n          colorPoolSize = colorPool.length,\n          variation = 0;\n\n      for (i = 0; i < neededColors; i++) {\n        c = $.color.parse(colorPool[i % colorPoolSize] || \"#666\"); // Each time we exhaust the colors in the pool we adjust\n        // a scaling factor used to produce more variations on\n        // those colors. The factor alternates negative/positive\n        // to produce lighter/darker colors.\n        // Reset the variation after every few cycles, or else\n        // it will end up producing only white or black colors.\n\n        if (i % colorPoolSize == 0 && i) {\n          if (variation >= 0) {\n            if (variation < 0.5) {\n              variation = -variation - 0.2;\n            } else variation = 0;\n          } else variation = -variation;\n        }\n\n        colors[i] = c.scale('rgb', 1 + variation);\n      } // Finalize the series options, filling in their colors\n\n\n      var colori = 0,\n          s;\n\n      for (i = 0; i < series.length; ++i) {\n        s = series[i]; // assign colors\n\n        if (s.color == null) {\n          s.color = colors[colori].toString();\n          ++colori;\n        } else if (typeof s.color == \"number\") s.color = colors[s.color].toString(); // turn on lines automatically in case nothing is set\n\n\n        if (s.lines.show == null) {\n          var v,\n              show = true;\n\n          for (v in s) {\n            if (s[v] && s[v].show) {\n              show = false;\n              break;\n            }\n          }\n\n          if (show) s.lines.show = true;\n        } // If nothing was provided for lines.zero, default it to match\n        // lines.fill, since areas by default should extend to zero.\n\n\n        if (s.lines.zero == null) {\n          s.lines.zero = !!s.lines.fill;\n        } // setup axes\n\n\n        s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, \"x\"));\n        s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, \"y\"));\n      }\n    }\n\n    function processData() {\n      var topSentry = Number.POSITIVE_INFINITY,\n          bottomSentry = Number.NEGATIVE_INFINITY,\n          fakeInfinity = Number.MAX_VALUE,\n          i,\n          j,\n          k,\n          m,\n          length,\n          s,\n          points,\n          ps,\n          x,\n          y,\n          axis,\n          val,\n          f,\n          p,\n          data,\n          format;\n\n      function updateAxis(axis, min, max) {\n        if (min < axis.datamin && min != -fakeInfinity) axis.datamin = min;\n        if (max > axis.datamax && max != fakeInfinity) axis.datamax = max;\n      }\n\n      $.each(allAxes(), function (_, axis) {\n        // init axis\n        axis.datamin = topSentry;\n        axis.datamax = bottomSentry;\n        axis.used = false;\n      });\n\n      for (i = 0; i < series.length; ++i) {\n        s = series[i];\n        s.datapoints = {\n          points: []\n        };\n        executeHooks(hooks.processRawData, [s, s.data, s.datapoints]);\n      } // first pass: clean and copy data\n\n\n      for (i = 0; i < series.length; ++i) {\n        s = series[i];\n        data = s.data;\n        format = s.datapoints.format;\n\n        if (!format) {\n          format = []; // find out how to copy\n\n          format.push({\n            x: true,\n            number: true,\n            required: true\n          });\n          format.push({\n            y: true,\n            number: true,\n            required: true\n          });\n\n          if (s.bars.show || s.lines.show && s.lines.fill) {\n            var autoscale = !!(s.bars.show && s.bars.zero || s.lines.show && s.lines.zero);\n            format.push({\n              y: true,\n              number: true,\n              required: false,\n              defaultValue: 0,\n              autoscale: autoscale\n            });\n\n            if (s.bars.horizontal) {\n              delete format[format.length - 1].y;\n              format[format.length - 1].x = true;\n            }\n          }\n\n          s.datapoints.format = format;\n        }\n\n        if (s.datapoints.pointsize != null) continue; // already filled in\n\n        s.datapoints.pointsize = format.length;\n        ps = s.datapoints.pointsize;\n        points = s.datapoints.points;\n        var insertSteps = s.lines.show && s.lines.steps;\n        s.xaxis.used = s.yaxis.used = true;\n\n        for (j = k = 0; j < data.length; ++j, k += ps) {\n          p = data[j];\n          var nullify = p == null;\n\n          if (!nullify) {\n            for (m = 0; m < ps; ++m) {\n              val = p[m];\n              f = format[m];\n\n              if (f) {\n                if (f.number && val != null) {\n                  val = +val; // convert to number\n\n                  if (isNaN(val)) val = null;else if (val == Infinity) val = fakeInfinity;else if (val == -Infinity) val = -fakeInfinity;\n                }\n\n                if (val == null) {\n                  if (f.required) nullify = true;\n                  if (f.defaultValue != null) val = f.defaultValue;\n                }\n              }\n\n              points[k + m] = val;\n            }\n          }\n\n          if (nullify) {\n            for (m = 0; m < ps; ++m) {\n              val = points[k + m];\n\n              if (val != null) {\n                f = format[m]; // extract min/max info\n\n                if (f.autoscale !== false) {\n                  if (f.x) {\n                    updateAxis(s.xaxis, val, val);\n                  }\n\n                  if (f.y) {\n                    updateAxis(s.yaxis, val, val);\n                  }\n                }\n              }\n\n              points[k + m] = null;\n            }\n          } else {\n            // a little bit of line specific stuff that\n            // perhaps shouldn't be here, but lacking\n            // better means...\n            if (insertSteps && k > 0 && points[k - ps] != null && points[k - ps] != points[k] && points[k - ps + 1] != points[k + 1]) {\n              // copy the point to make room for a middle point\n              for (m = 0; m < ps; ++m) {\n                points[k + ps + m] = points[k + m];\n              } // middle point has same y\n\n\n              points[k + 1] = points[k - ps + 1]; // we've added a point, better reflect that\n\n              k += ps;\n            }\n          }\n        }\n      } // give the hooks a chance to run\n\n\n      for (i = 0; i < series.length; ++i) {\n        s = series[i];\n        executeHooks(hooks.processDatapoints, [s, s.datapoints]);\n      } // second pass: find datamax/datamin for auto-scaling\n\n\n      for (i = 0; i < series.length; ++i) {\n        s = series[i];\n        points = s.datapoints.points;\n        ps = s.datapoints.pointsize;\n        format = s.datapoints.format;\n        var xmin = topSentry,\n            ymin = topSentry,\n            xmax = bottomSentry,\n            ymax = bottomSentry;\n\n        for (j = 0; j < points.length; j += ps) {\n          if (points[j] == null) continue;\n\n          for (m = 0; m < ps; ++m) {\n            val = points[j + m];\n            f = format[m];\n            if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity) continue;\n\n            if (f.x) {\n              if (val < xmin) xmin = val;\n              if (val > xmax) xmax = val;\n            }\n\n            if (f.y) {\n              if (val < ymin) ymin = val;\n              if (val > ymax) ymax = val;\n            }\n          }\n        }\n\n        if (s.bars.show) {\n          // make sure we got room for the bar on the dancing floor\n          var delta;\n\n          switch (s.bars.align) {\n            case \"left\":\n              delta = 0;\n              break;\n\n            case \"right\":\n              delta = -s.bars.barWidth;\n              break;\n\n            default:\n              delta = -s.bars.barWidth / 2;\n          }\n\n          if (s.bars.horizontal) {\n            ymin += delta;\n            ymax += delta + s.bars.barWidth;\n          } else {\n            xmin += delta;\n            xmax += delta + s.bars.barWidth;\n          }\n        }\n\n        updateAxis(s.xaxis, xmin, xmax);\n        updateAxis(s.yaxis, ymin, ymax);\n      }\n\n      $.each(allAxes(), function (_, axis) {\n        if (axis.datamin == topSentry) axis.datamin = null;\n        if (axis.datamax == bottomSentry) axis.datamax = null;\n      });\n    }\n\n    function setupCanvases() {\n      // Make sure the placeholder is clear of everything except canvases\n      // from a previous plot in this container that we'll try to re-use.\n      placeholder.css(\"padding\", 0) // padding messes up the positioning\n      .children().filter(function () {\n        return !$(this).hasClass(\"flot-overlay\") && !$(this).hasClass('flot-base');\n      }).remove();\n      if (placeholder.css(\"position\") == 'static') placeholder.css(\"position\", \"relative\"); // for positioning labels and overlay\n\n      surface = new Canvas(\"flot-base\", placeholder);\n      overlay = new Canvas(\"flot-overlay\", placeholder); // overlay canvas for interactive features\n\n      ctx = surface.context;\n      octx = overlay.context; // define which element we're listening for events on\n\n      eventHolder = $(overlay.element).unbind(); // If we're re-using a plot object, shut down the old one\n\n      var existing = placeholder.data(\"plot\");\n\n      if (existing) {\n        existing.shutdown();\n        overlay.clear();\n      } // save in case we get replotted\n\n\n      placeholder.data(\"plot\", plot);\n    }\n\n    function bindEvents() {\n      // bind events\n      if (options.grid.hoverable) {\n        eventHolder.mousemove(onMouseMove); // Use bind, rather than .mouseleave, because we officially\n        // still support jQuery 1.2.6, which doesn't define a shortcut\n        // for mouseenter or mouseleave.  This was a bug/oversight that\n        // was fixed somewhere around 1.3.x.  We can return to using\n        // .mouseleave when we drop support for 1.2.6.\n\n        eventHolder.bind(\"mouseleave\", onMouseLeave);\n      }\n\n      if (options.grid.clickable) eventHolder.click(onClick);\n      executeHooks(hooks.bindEvents, [eventHolder]);\n    }\n\n    function shutdown() {\n      if (redrawTimeout) clearTimeout(redrawTimeout);\n      eventHolder.unbind(\"mousemove\", onMouseMove);\n      eventHolder.unbind(\"mouseleave\", onMouseLeave);\n      eventHolder.unbind(\"click\", onClick);\n      executeHooks(hooks.shutdown, [eventHolder]);\n    }\n\n    function setTransformationHelpers(axis) {\n      // set helper functions on the axis, assumes plot area\n      // has been computed already\n      function identity(x) {\n        return x;\n      }\n\n      var s,\n          m,\n          t = axis.options.transform || identity,\n          it = axis.options.inverseTransform; // precompute how much the axis is scaling a point\n      // in canvas space\n\n      if (axis.direction == \"x\") {\n        s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));\n        m = Math.min(t(axis.max), t(axis.min));\n      } else {\n        s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));\n        s = -s;\n        m = Math.max(t(axis.max), t(axis.min));\n      } // data point to canvas coordinate\n\n\n      if (t == identity) // slight optimization\n        axis.p2c = function (p) {\n          return (p - m) * s;\n        };else axis.p2c = function (p) {\n        return (t(p) - m) * s;\n      }; // canvas coordinate to data point\n\n      if (!it) axis.c2p = function (c) {\n        return m + c / s;\n      };else axis.c2p = function (c) {\n        return it(m + c / s);\n      };\n    }\n\n    function measureTickLabels(axis) {\n      var opts = axis.options,\n          ticks = axis.ticks || [],\n          labelWidth = opts.labelWidth || 0,\n          labelHeight = opts.labelHeight || 0,\n          maxWidth = labelWidth || (axis.direction == \"x\" ? Math.floor(surface.width / (ticks.length || 1)) : null),\n          legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n          layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n          font = opts.font || \"flot-tick-label tickLabel\";\n\n      for (var i = 0; i < ticks.length; ++i) {\n        var t = ticks[i];\n        if (!t.label) continue;\n        var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);\n        labelWidth = Math.max(labelWidth, info.width);\n        labelHeight = Math.max(labelHeight, info.height);\n      }\n\n      axis.labelWidth = opts.labelWidth || labelWidth;\n      axis.labelHeight = opts.labelHeight || labelHeight;\n    }\n\n    function allocateAxisBoxFirstPhase(axis) {\n      // find the bounding box of the axis by looking at label\n      // widths/heights and ticks, make room by diminishing the\n      // plotOffset; this first phase only looks at one\n      // dimension per axis, the other dimension depends on the\n      // other axes so will have to wait\n      var lw = axis.labelWidth,\n          lh = axis.labelHeight,\n          pos = axis.options.position,\n          isXAxis = axis.direction === \"x\",\n          tickLength = axis.options.tickLength,\n          axisMargin = options.grid.axisMargin,\n          padding = options.grid.labelMargin,\n          innermost = true,\n          outermost = true,\n          first = true,\n          found = false; // Determine the axis's position in its direction and on its side\n\n      $.each(isXAxis ? xaxes : yaxes, function (i, a) {\n        if (a && (a.show || a.reserveSpace)) {\n          if (a === axis) {\n            found = true;\n          } else if (a.options.position === pos) {\n            if (found) {\n              outermost = false;\n            } else {\n              innermost = false;\n            }\n          }\n\n          if (!found) {\n            first = false;\n          }\n        }\n      }); // The outermost axis on each side has no margin\n\n      if (outermost) {\n        axisMargin = 0;\n      } // The ticks for the first axis in each direction stretch across\n\n\n      if (tickLength == null) {\n        tickLength = first ? \"full\" : 5;\n      }\n\n      if (!isNaN(+tickLength)) padding += +tickLength;\n\n      if (isXAxis) {\n        lh += padding;\n\n        if (pos == \"bottom\") {\n          plotOffset.bottom += lh + axisMargin;\n          axis.box = {\n            top: surface.height - plotOffset.bottom,\n            height: lh\n          };\n        } else {\n          axis.box = {\n            top: plotOffset.top + axisMargin,\n            height: lh\n          };\n          plotOffset.top += lh + axisMargin;\n        }\n      } else {\n        lw += padding;\n\n        if (pos == \"left\") {\n          axis.box = {\n            left: plotOffset.left + axisMargin,\n            width: lw\n          };\n          plotOffset.left += lw + axisMargin;\n        } else {\n          plotOffset.right += lw + axisMargin;\n          axis.box = {\n            left: surface.width - plotOffset.right,\n            width: lw\n          };\n        }\n      } // save for future reference\n\n\n      axis.position = pos;\n      axis.tickLength = tickLength;\n      axis.box.padding = padding;\n      axis.innermost = innermost;\n    }\n\n    function allocateAxisBoxSecondPhase(axis) {\n      // now that all axis boxes have been placed in one\n      // dimension, we can set the remaining dimension coordinates\n      if (axis.direction == \"x\") {\n        axis.box.left = plotOffset.left - axis.labelWidth / 2;\n        axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;\n      } else {\n        axis.box.top = plotOffset.top - axis.labelHeight / 2;\n        axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;\n      }\n    }\n\n    function adjustLayoutForThingsStickingOut() {\n      // possibly adjust plot offset to ensure everything stays\n      // inside the canvas and isn't clipped off\n      var minMargin = options.grid.minBorderMargin,\n          axis,\n          i; // check stuff from the plot (FIXME: this should just read\n      // a value from the series, otherwise it's impossible to\n      // customize)\n\n      if (minMargin == null) {\n        minMargin = 0;\n\n        for (i = 0; i < series.length; ++i) {\n          minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth / 2));\n        }\n      }\n\n      var margins = {\n        left: minMargin,\n        right: minMargin,\n        top: minMargin,\n        bottom: minMargin\n      }; // check axis labels, note we don't check the actual\n      // labels but instead use the overall width/height to not\n      // jump as much around with replots\n\n      $.each(allAxes(), function (_, axis) {\n        if (axis.reserveSpace && axis.ticks && axis.ticks.length) {\n          if (axis.direction === \"x\") {\n            margins.left = Math.max(margins.left, axis.labelWidth / 2);\n            margins.right = Math.max(margins.right, axis.labelWidth / 2);\n          } else {\n            margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);\n            margins.top = Math.max(margins.top, axis.labelHeight / 2);\n          }\n        }\n      });\n      plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));\n      plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));\n      plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));\n      plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));\n    }\n\n    function setupGrid() {\n      var i,\n          axes = allAxes(),\n          showGrid = options.grid.show; // Initialize the plot's offset from the edge of the canvas\n\n      for (var a in plotOffset) {\n        var margin = options.grid.margin || 0;\n        plotOffset[a] = typeof margin == \"number\" ? margin : margin[a] || 0;\n      }\n\n      executeHooks(hooks.processOffset, [plotOffset]); // If the grid is visible, add its border width to the offset\n\n      for (var a in plotOffset) {\n        if (_typeof(options.grid.borderWidth) == \"object\") {\n          plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;\n        } else {\n          plotOffset[a] += showGrid ? options.grid.borderWidth : 0;\n        }\n      }\n\n      $.each(axes, function (_, axis) {\n        var axisOpts = axis.options;\n        axis.show = axisOpts.show == null ? axis.used : axisOpts.show;\n        axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;\n        setRange(axis);\n      });\n\n      if (showGrid) {\n        var allocatedAxes = $.grep(axes, function (axis) {\n          return axis.show || axis.reserveSpace;\n        });\n        $.each(allocatedAxes, function (_, axis) {\n          // make the ticks\n          setupTickGeneration(axis);\n          setTicks(axis);\n          snapRangeToTicks(axis, axis.ticks); // find labelWidth/Height for axis\n\n          measureTickLabels(axis);\n        }); // with all dimensions calculated, we can compute the\n        // axis bounding boxes, start from the outside\n        // (reverse order)\n\n        for (i = allocatedAxes.length - 1; i >= 0; --i) {\n          allocateAxisBoxFirstPhase(allocatedAxes[i]);\n        } // make sure we've got enough space for things that\n        // might stick out\n\n\n        adjustLayoutForThingsStickingOut();\n        $.each(allocatedAxes, function (_, axis) {\n          allocateAxisBoxSecondPhase(axis);\n        });\n      }\n\n      plotWidth = surface.width - plotOffset.left - plotOffset.right;\n      plotHeight = surface.height - plotOffset.bottom - plotOffset.top; // now we got the proper plot dimensions, we can compute the scaling\n\n      $.each(axes, function (_, axis) {\n        setTransformationHelpers(axis);\n      });\n\n      if (showGrid) {\n        drawAxisLabels();\n      }\n\n      insertLegend();\n    }\n\n    function setRange(axis) {\n      var opts = axis.options,\n          min = +(opts.min != null ? opts.min : axis.datamin),\n          max = +(opts.max != null ? opts.max : axis.datamax),\n          delta = max - min;\n\n      if (delta == 0.0) {\n        // degenerate case\n        var widen = max == 0 ? 1 : 0.01;\n        if (opts.min == null) min -= widen; // always widen max if we couldn't widen min to ensure we\n        // don't fall into min == max which doesn't work\n\n        if (opts.max == null || opts.min != null) max += widen;\n      } else {\n        // consider autoscaling\n        var margin = opts.autoscaleMargin;\n\n        if (margin != null) {\n          if (opts.min == null) {\n            min -= delta * margin; // make sure we don't go below zero if all values\n            // are positive\n\n            if (min < 0 && axis.datamin != null && axis.datamin >= 0) min = 0;\n          }\n\n          if (opts.max == null) {\n            max += delta * margin;\n            if (max > 0 && axis.datamax != null && axis.datamax <= 0) max = 0;\n          }\n        }\n      }\n\n      axis.min = min;\n      axis.max = max;\n    }\n\n    function setupTickGeneration(axis) {\n      var opts = axis.options; // estimate number of ticks\n\n      var noTicks;\n      if (typeof opts.ticks == \"number\" && opts.ticks > 0) noTicks = opts.ticks;else // heuristic based on the model a*sqrt(x) fitted to\n        // some data points that seemed reasonable\n        noTicks = 0.3 * Math.sqrt(axis.direction == \"x\" ? surface.width : surface.height);\n      var delta = (axis.max - axis.min) / noTicks,\n          dec = -Math.floor(Math.log(delta) / Math.LN10),\n          maxDec = opts.tickDecimals;\n\n      if (maxDec != null && dec > maxDec) {\n        dec = maxDec;\n      }\n\n      var magn = Math.pow(10, -dec),\n          norm = delta / magn,\n          // norm is between 1.0 and 10.0\n      size;\n\n      if (norm < 1.5) {\n        size = 1;\n      } else if (norm < 3) {\n        size = 2; // special case for 2.5, requires an extra decimal\n\n        if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\n          size = 2.5;\n          ++dec;\n        }\n      } else if (norm < 7.5) {\n        size = 5;\n      } else {\n        size = 10;\n      }\n\n      size *= magn;\n\n      if (opts.minTickSize != null && size < opts.minTickSize) {\n        size = opts.minTickSize;\n      }\n\n      axis.delta = delta;\n      axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);\n      axis.tickSize = opts.tickSize || size; // Time mode was moved to a plug-in in 0.8, and since so many people use it\n      // we'll add an especially friendly reminder to make sure they included it.\n\n      if (opts.mode == \"time\" && !axis.tickGenerator) {\n        throw new Error(\"Time mode requires the flot.time plugin.\");\n      } // Flot supports base-10 axes; any other mode else is handled by a plug-in,\n      // like flot.time.js.\n\n\n      if (!axis.tickGenerator) {\n        axis.tickGenerator = function (axis) {\n          var ticks = [],\n              start = floorInBase(axis.min, axis.tickSize),\n              i = 0,\n              v = Number.NaN,\n              prev;\n\n          do {\n            prev = v;\n            v = start + i * axis.tickSize;\n            ticks.push(v);\n            ++i;\n          } while (v < axis.max && v != prev);\n\n          return ticks;\n        };\n\n        axis.tickFormatter = function (value, axis) {\n          var factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\n          var formatted = \"\" + Math.round(value * factor) / factor; // If tickDecimals was specified, ensure that we have exactly that\n          // much precision; otherwise default to the value's own precision.\n\n          if (axis.tickDecimals != null) {\n            var decimal = formatted.indexOf(\".\");\n            var precision = decimal == -1 ? 0 : formatted.length - decimal - 1;\n\n            if (precision < axis.tickDecimals) {\n              return (precision ? formatted : formatted + \".\") + (\"\" + factor).substr(1, axis.tickDecimals - precision);\n            }\n          }\n\n          return formatted;\n        };\n      }\n\n      if ($.isFunction(opts.tickFormatter)) axis.tickFormatter = function (v, axis) {\n        return \"\" + opts.tickFormatter(v, axis);\n      };\n\n      if (opts.alignTicksWithAxis != null) {\n        var otherAxis = (axis.direction == \"x\" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];\n\n        if (otherAxis && otherAxis.used && otherAxis != axis) {\n          // consider snapping min/max to outermost nice ticks\n          var niceTicks = axis.tickGenerator(axis);\n\n          if (niceTicks.length > 0) {\n            if (opts.min == null) axis.min = Math.min(axis.min, niceTicks[0]);\n            if (opts.max == null && niceTicks.length > 1) axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);\n          }\n\n          axis.tickGenerator = function (axis) {\n            // copy ticks, scaled to this axis\n            var ticks = [],\n                v,\n                i;\n\n            for (i = 0; i < otherAxis.ticks.length; ++i) {\n              v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);\n              v = axis.min + v * (axis.max - axis.min);\n              ticks.push(v);\n            }\n\n            return ticks;\n          }; // we might need an extra decimal since forced\n          // ticks don't necessarily fit naturally\n\n\n          if (!axis.mode && opts.tickDecimals == null) {\n            var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),\n                ts = axis.tickGenerator(axis); // only proceed if the tick interval rounded\n            // with an extra decimal doesn't give us a\n            // zero at end\n\n            if (!(ts.length > 1 && /\\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec)))) axis.tickDecimals = extraDec;\n          }\n        }\n      }\n    }\n\n    function setTicks(axis) {\n      var oticks = axis.options.ticks,\n          ticks = [];\n      if (oticks == null || typeof oticks == \"number\" && oticks > 0) ticks = axis.tickGenerator(axis);else if (oticks) {\n        if ($.isFunction(oticks)) // generate the ticks\n          ticks = oticks(axis);else ticks = oticks;\n      } // clean up/labelify the supplied ticks, copy them over\n\n      var i, v;\n      axis.ticks = [];\n\n      for (i = 0; i < ticks.length; ++i) {\n        var label = null;\n        var t = ticks[i];\n\n        if (_typeof(t) == \"object\") {\n          v = +t[0];\n          if (t.length > 1) label = t[1];\n        } else v = +t;\n\n        if (label == null) label = axis.tickFormatter(v, axis);\n        if (!isNaN(v)) axis.ticks.push({\n          v: v,\n          label: label\n        });\n      }\n    }\n\n    function snapRangeToTicks(axis, ticks) {\n      if (axis.options.autoscaleMargin && ticks.length > 0) {\n        // snap to ticks\n        if (axis.options.min == null) axis.min = Math.min(axis.min, ticks[0].v);\n        if (axis.options.max == null && ticks.length > 1) axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);\n      }\n    }\n\n    function draw() {\n      surface.clear();\n      executeHooks(hooks.drawBackground, [ctx]);\n      var grid = options.grid; // draw background, if any\n\n      if (grid.show && grid.backgroundColor) drawBackground();\n\n      if (grid.show && !grid.aboveData) {\n        drawGrid();\n      }\n\n      for (var i = 0; i < series.length; ++i) {\n        executeHooks(hooks.drawSeries, [ctx, series[i]]);\n        drawSeries(series[i]);\n      }\n\n      executeHooks(hooks.draw, [ctx]);\n\n      if (grid.show && grid.aboveData) {\n        drawGrid();\n      }\n\n      surface.render(); // A draw implies that either the axes or data have changed, so we\n      // should probably update the overlay highlights as well.\n\n      triggerRedrawOverlay();\n    }\n\n    function extractRange(ranges, coord) {\n      var axis,\n          from,\n          to,\n          key,\n          axes = allAxes();\n\n      for (var i = 0; i < axes.length; ++i) {\n        axis = axes[i];\n\n        if (axis.direction == coord) {\n          key = coord + axis.n + \"axis\";\n          if (!ranges[key] && axis.n == 1) key = coord + \"axis\"; // support x1axis as xaxis\n\n          if (ranges[key]) {\n            from = ranges[key].from;\n            to = ranges[key].to;\n            break;\n          }\n        }\n      } // backwards-compat stuff - to be removed in future\n\n\n      if (!ranges[key]) {\n        axis = coord == \"x\" ? xaxes[0] : yaxes[0];\n        from = ranges[coord + \"1\"];\n        to = ranges[coord + \"2\"];\n      } // auto-reverse as an added bonus\n\n\n      if (from != null && to != null && from > to) {\n        var tmp = from;\n        from = to;\n        to = tmp;\n      }\n\n      return {\n        from: from,\n        to: to,\n        axis: axis\n      };\n    }\n\n    function drawBackground() {\n      ctx.save();\n      ctx.translate(plotOffset.left, plotOffset.top);\n      ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, \"rgba(255, 255, 255, 0)\");\n      ctx.fillRect(0, 0, plotWidth, plotHeight);\n      ctx.restore();\n    }\n\n    function drawGrid() {\n      var i, axes, bw, bc;\n      ctx.save();\n      ctx.translate(plotOffset.left, plotOffset.top); // draw markings\n\n      var markings = options.grid.markings;\n\n      if (markings) {\n        if ($.isFunction(markings)) {\n          axes = plot.getAxes(); // xmin etc. is backwards compatibility, to be\n          // removed in the future\n\n          axes.xmin = axes.xaxis.min;\n          axes.xmax = axes.xaxis.max;\n          axes.ymin = axes.yaxis.min;\n          axes.ymax = axes.yaxis.max;\n          markings = markings(axes);\n        }\n\n        for (i = 0; i < markings.length; ++i) {\n          var m = markings[i],\n              xrange = extractRange(m, \"x\"),\n              yrange = extractRange(m, \"y\"); // fill in missing\n\n          if (xrange.from == null) xrange.from = xrange.axis.min;\n          if (xrange.to == null) xrange.to = xrange.axis.max;\n          if (yrange.from == null) yrange.from = yrange.axis.min;\n          if (yrange.to == null) yrange.to = yrange.axis.max; // clip\n\n          if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max || yrange.to < yrange.axis.min || yrange.from > yrange.axis.max) continue;\n          xrange.from = Math.max(xrange.from, xrange.axis.min);\n          xrange.to = Math.min(xrange.to, xrange.axis.max);\n          yrange.from = Math.max(yrange.from, yrange.axis.min);\n          yrange.to = Math.min(yrange.to, yrange.axis.max);\n          var xequal = xrange.from === xrange.to,\n              yequal = yrange.from === yrange.to;\n\n          if (xequal && yequal) {\n            continue;\n          } // then draw\n\n\n          xrange.from = Math.floor(xrange.axis.p2c(xrange.from));\n          xrange.to = Math.floor(xrange.axis.p2c(xrange.to));\n          yrange.from = Math.floor(yrange.axis.p2c(yrange.from));\n          yrange.to = Math.floor(yrange.axis.p2c(yrange.to));\n\n          if (xequal || yequal) {\n            var lineWidth = m.lineWidth || options.grid.markingsLineWidth,\n                subPixel = lineWidth % 2 ? 0.5 : 0;\n            ctx.beginPath();\n            ctx.strokeStyle = m.color || options.grid.markingsColor;\n            ctx.lineWidth = lineWidth;\n\n            if (xequal) {\n              ctx.moveTo(xrange.to + subPixel, yrange.from);\n              ctx.lineTo(xrange.to + subPixel, yrange.to);\n            } else {\n              ctx.moveTo(xrange.from, yrange.to + subPixel);\n              ctx.lineTo(xrange.to, yrange.to + subPixel);\n            }\n\n            ctx.stroke();\n          } else {\n            ctx.fillStyle = m.color || options.grid.markingsColor;\n            ctx.fillRect(xrange.from, yrange.to, xrange.to - xrange.from, yrange.from - yrange.to);\n          }\n        }\n      } // draw the ticks\n\n\n      axes = allAxes();\n      bw = options.grid.borderWidth;\n\n      for (var j = 0; j < axes.length; ++j) {\n        var axis = axes[j],\n            box = axis.box,\n            t = axis.tickLength,\n            x,\n            y,\n            xoff,\n            yoff;\n        if (!axis.show || axis.ticks.length == 0) continue;\n        ctx.lineWidth = 1; // find the edges\n\n        if (axis.direction == \"x\") {\n          x = 0;\n          if (t == \"full\") y = axis.position == \"top\" ? 0 : plotHeight;else y = box.top - plotOffset.top + (axis.position == \"top\" ? box.height : 0);\n        } else {\n          y = 0;\n          if (t == \"full\") x = axis.position == \"left\" ? 0 : plotWidth;else x = box.left - plotOffset.left + (axis.position == \"left\" ? box.width : 0);\n        } // draw tick bar\n\n\n        if (!axis.innermost) {\n          ctx.strokeStyle = axis.options.color;\n          ctx.beginPath();\n          xoff = yoff = 0;\n          if (axis.direction == \"x\") xoff = plotWidth + 1;else yoff = plotHeight + 1;\n\n          if (ctx.lineWidth == 1) {\n            if (axis.direction == \"x\") {\n              y = Math.floor(y) + 0.5;\n            } else {\n              x = Math.floor(x) + 0.5;\n            }\n          }\n\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + xoff, y + yoff);\n          ctx.stroke();\n        } // draw ticks\n\n\n        ctx.strokeStyle = axis.options.tickColor;\n        ctx.beginPath();\n\n        for (i = 0; i < axis.ticks.length; ++i) {\n          var v = axis.ticks[i].v;\n          xoff = yoff = 0;\n          if (isNaN(v) || v < axis.min || v > axis.max // skip those lying on the axes if we got a border\n          || t == \"full\" && (_typeof(bw) == \"object\" && bw[axis.position] > 0 || bw > 0) && (v == axis.min || v == axis.max)) continue;\n\n          if (axis.direction == \"x\") {\n            x = axis.p2c(v);\n            yoff = t == \"full\" ? -plotHeight : t;\n            if (axis.position == \"top\") yoff = -yoff;\n          } else {\n            y = axis.p2c(v);\n            xoff = t == \"full\" ? -plotWidth : t;\n            if (axis.position == \"left\") xoff = -xoff;\n          }\n\n          if (ctx.lineWidth == 1) {\n            if (axis.direction == \"x\") x = Math.floor(x) + 0.5;else y = Math.floor(y) + 0.5;\n          }\n\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + xoff, y + yoff);\n        }\n\n        ctx.stroke();\n      } // draw border\n\n\n      if (bw) {\n        // If either borderWidth or borderColor is an object, then draw the border\n        // line by line instead of as one rectangle\n        bc = options.grid.borderColor;\n\n        if (_typeof(bw) == \"object\" || _typeof(bc) == \"object\") {\n          if (_typeof(bw) !== \"object\") {\n            bw = {\n              top: bw,\n              right: bw,\n              bottom: bw,\n              left: bw\n            };\n          }\n\n          if (_typeof(bc) !== \"object\") {\n            bc = {\n              top: bc,\n              right: bc,\n              bottom: bc,\n              left: bc\n            };\n          }\n\n          if (bw.top > 0) {\n            ctx.strokeStyle = bc.top;\n            ctx.lineWidth = bw.top;\n            ctx.beginPath();\n            ctx.moveTo(0 - bw.left, 0 - bw.top / 2);\n            ctx.lineTo(plotWidth, 0 - bw.top / 2);\n            ctx.stroke();\n          }\n\n          if (bw.right > 0) {\n            ctx.strokeStyle = bc.right;\n            ctx.lineWidth = bw.right;\n            ctx.beginPath();\n            ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);\n            ctx.lineTo(plotWidth + bw.right / 2, plotHeight);\n            ctx.stroke();\n          }\n\n          if (bw.bottom > 0) {\n            ctx.strokeStyle = bc.bottom;\n            ctx.lineWidth = bw.bottom;\n            ctx.beginPath();\n            ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);\n            ctx.lineTo(0, plotHeight + bw.bottom / 2);\n            ctx.stroke();\n          }\n\n          if (bw.left > 0) {\n            ctx.strokeStyle = bc.left;\n            ctx.lineWidth = bw.left;\n            ctx.beginPath();\n            ctx.moveTo(0 - bw.left / 2, plotHeight + bw.bottom);\n            ctx.lineTo(0 - bw.left / 2, 0);\n            ctx.stroke();\n          }\n        } else {\n          ctx.lineWidth = bw;\n          ctx.strokeStyle = options.grid.borderColor;\n          ctx.strokeRect(-bw / 2, -bw / 2, plotWidth + bw, plotHeight + bw);\n        }\n      }\n\n      ctx.restore();\n    }\n\n    function drawAxisLabels() {\n      $.each(allAxes(), function (_, axis) {\n        var box = axis.box,\n            legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n            layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n            font = axis.options.font || \"flot-tick-label tickLabel\",\n            tick,\n            x,\n            y,\n            halign,\n            valign; // Remove text before checking for axis.show and ticks.length;\n        // otherwise plugins, like flot-tickrotor, that draw their own\n        // tick labels will end up with both theirs and the defaults.\n\n        surface.removeText(layer);\n        if (!axis.show || axis.ticks.length == 0) return;\n\n        for (var i = 0; i < axis.ticks.length; ++i) {\n          tick = axis.ticks[i];\n          if (!tick.label || tick.v < axis.min || tick.v > axis.max) continue;\n\n          if (axis.direction == \"x\") {\n            halign = \"center\";\n            x = plotOffset.left + axis.p2c(tick.v);\n\n            if (axis.position == \"bottom\") {\n              y = box.top + box.padding;\n            } else {\n              y = box.top + box.height - box.padding;\n              valign = \"bottom\";\n            }\n          } else {\n            valign = \"middle\";\n            y = plotOffset.top + axis.p2c(tick.v);\n\n            if (axis.position == \"left\") {\n              x = box.left + box.width - box.padding;\n              halign = \"right\";\n            } else {\n              x = box.left + box.padding;\n            }\n          }\n\n          surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);\n        }\n      });\n    }\n\n    function drawSeries(series) {\n      if (series.lines.show) drawSeriesLines(series);\n      if (series.bars.show) drawSeriesBars(series);\n      if (series.points.show) drawSeriesPoints(series);\n    }\n\n    function drawSeriesLines(series) {\n      function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {\n        var points = datapoints.points,\n            ps = datapoints.pointsize,\n            prevx = null,\n            prevy = null;\n        ctx.beginPath();\n\n        for (var i = ps; i < points.length; i += ps) {\n          var x1 = points[i - ps],\n              y1 = points[i - ps + 1],\n              x2 = points[i],\n              y2 = points[i + 1];\n          if (x1 == null || x2 == null) continue; // clip with ymin\n\n          if (y1 <= y2 && y1 < axisy.min) {\n            if (y2 < axisy.min) continue; // line segment is outside\n            // compute new intersection point\n\n            x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y1 = axisy.min;\n          } else if (y2 <= y1 && y2 < axisy.min) {\n            if (y1 < axisy.min) continue;\n            x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y2 = axisy.min;\n          } // clip with ymax\n\n\n          if (y1 >= y2 && y1 > axisy.max) {\n            if (y2 > axisy.max) continue;\n            x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y1 = axisy.max;\n          } else if (y2 >= y1 && y2 > axisy.max) {\n            if (y1 > axisy.max) continue;\n            x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y2 = axisy.max;\n          } // clip with xmin\n\n\n          if (x1 <= x2 && x1 < axisx.min) {\n            if (x2 < axisx.min) continue;\n            y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x1 = axisx.min;\n          } else if (x2 <= x1 && x2 < axisx.min) {\n            if (x1 < axisx.min) continue;\n            y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x2 = axisx.min;\n          } // clip with xmax\n\n\n          if (x1 >= x2 && x1 > axisx.max) {\n            if (x2 > axisx.max) continue;\n            y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x1 = axisx.max;\n          } else if (x2 >= x1 && x2 > axisx.max) {\n            if (x1 > axisx.max) continue;\n            y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x2 = axisx.max;\n          }\n\n          if (x1 != prevx || y1 != prevy) ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n          prevx = x2;\n          prevy = y2;\n          ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);\n        }\n\n        ctx.stroke();\n      }\n\n      function plotLineArea(datapoints, axisx, axisy) {\n        var points = datapoints.points,\n            ps = datapoints.pointsize,\n            bottom = Math.min(Math.max(0, axisy.min), axisy.max),\n            i = 0,\n            top,\n            areaOpen = false,\n            ypos = 1,\n            segmentStart = 0,\n            segmentEnd = 0; // we process each segment in two turns, first forward\n        // direction to sketch out top, then once we hit the\n        // end we go backwards to sketch the bottom\n\n        while (true) {\n          if (ps > 0 && i > points.length + ps) break;\n          i += ps; // ps is negative if going backwards\n\n          var x1 = points[i - ps],\n              y1 = points[i - ps + ypos],\n              x2 = points[i],\n              y2 = points[i + ypos];\n\n          if (areaOpen) {\n            if (ps > 0 && x1 != null && x2 == null) {\n              // at turning point\n              segmentEnd = i;\n              ps = -ps;\n              ypos = 2;\n              continue;\n            }\n\n            if (ps < 0 && i == segmentStart + ps) {\n              // done with the reverse sweep\n              ctx.fill();\n              areaOpen = false;\n              ps = -ps;\n              ypos = 1;\n              i = segmentStart = segmentEnd + ps;\n              continue;\n            }\n          }\n\n          if (x1 == null || x2 == null) continue; // clip x values\n          // clip with xmin\n\n          if (x1 <= x2 && x1 < axisx.min) {\n            if (x2 < axisx.min) continue;\n            y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x1 = axisx.min;\n          } else if (x2 <= x1 && x2 < axisx.min) {\n            if (x1 < axisx.min) continue;\n            y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x2 = axisx.min;\n          } // clip with xmax\n\n\n          if (x1 >= x2 && x1 > axisx.max) {\n            if (x2 > axisx.max) continue;\n            y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x1 = axisx.max;\n          } else if (x2 >= x1 && x2 > axisx.max) {\n            if (x1 > axisx.max) continue;\n            y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n            x2 = axisx.max;\n          }\n\n          if (!areaOpen) {\n            // open area\n            ctx.beginPath();\n            ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));\n            areaOpen = true;\n          } // now first check the case where both is outside\n\n\n          if (y1 >= axisy.max && y2 >= axisy.max) {\n            ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));\n            ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));\n            continue;\n          } else if (y1 <= axisy.min && y2 <= axisy.min) {\n            ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));\n            ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));\n            continue;\n          } // else it's a bit more complicated, there might\n          // be a flat maxed out rectangle first, then a\n          // triangular cutout or reverse; to find these\n          // keep track of the current x values\n\n\n          var x1old = x1,\n              x2old = x2; // clip the y values, without shortcutting, we\n          // go through all cases in turn\n          // clip with ymin\n\n          if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {\n            x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y1 = axisy.min;\n          } else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {\n            x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y2 = axisy.min;\n          } // clip with ymax\n\n\n          if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {\n            x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y1 = axisy.max;\n          } else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {\n            x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n            y2 = axisy.max;\n          } // if the x value was changed we got a rectangle\n          // to fill\n\n\n          if (x1 != x1old) {\n            ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1)); // it goes to (x1, y1), but we fill that below\n          } // fill triangular section, this sometimes result\n          // in redundant points if (x1, y1) hasn't changed\n          // from previous line to, but we just ignore that\n\n\n          ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));\n          ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2)); // fill the other rectangle if it's there\n\n          if (x2 != x2old) {\n            ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n            ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));\n          }\n        }\n      }\n\n      ctx.save();\n      ctx.translate(plotOffset.left, plotOffset.top);\n      ctx.lineJoin = \"round\";\n      var lw = series.lines.lineWidth,\n          sw = series.shadowSize; // FIXME: consider another form of shadow when filling is turned on\n\n      if (lw > 0 && sw > 0) {\n        // draw shadow as a thick and thin line with transparency\n        ctx.lineWidth = sw;\n        ctx.strokeStyle = \"rgba(0,0,0,0.1)\"; // position shadow at angle from the mid of line\n\n        var angle = Math.PI / 18;\n        plotLine(series.datapoints, Math.sin(angle) * (lw / 2 + sw / 2), Math.cos(angle) * (lw / 2 + sw / 2), series.xaxis, series.yaxis);\n        ctx.lineWidth = sw / 2;\n        plotLine(series.datapoints, Math.sin(angle) * (lw / 2 + sw / 4), Math.cos(angle) * (lw / 2 + sw / 4), series.xaxis, series.yaxis);\n      }\n\n      ctx.lineWidth = lw;\n      ctx.strokeStyle = series.color;\n      var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);\n\n      if (fillStyle) {\n        ctx.fillStyle = fillStyle;\n        plotLineArea(series.datapoints, series.xaxis, series.yaxis);\n      }\n\n      if (lw > 0) plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);\n      ctx.restore();\n    }\n\n    function drawSeriesPoints(series) {\n      function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {\n        var points = datapoints.points,\n            ps = datapoints.pointsize;\n\n        for (var i = 0; i < points.length; i += ps) {\n          var x = points[i],\n              y = points[i + 1];\n          if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max) continue;\n          ctx.beginPath();\n          x = axisx.p2c(x);\n          y = axisy.p2c(y) + offset;\n          if (symbol == \"circle\") ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);else symbol(ctx, x, y, radius, shadow);\n          ctx.closePath();\n\n          if (fillStyle) {\n            ctx.fillStyle = fillStyle;\n            ctx.fill();\n          }\n\n          ctx.stroke();\n        }\n      }\n\n      ctx.save();\n      ctx.translate(plotOffset.left, plotOffset.top);\n      var lw = series.points.lineWidth,\n          sw = series.shadowSize,\n          radius = series.points.radius,\n          symbol = series.points.symbol; // If the user sets the line width to 0, we change it to a very \n      // small value. A line width of 0 seems to force the default of 1.\n      // Doing the conditional here allows the shadow setting to still be \n      // optional even with a lineWidth of 0.\n\n      if (lw == 0) lw = 0.0001;\n\n      if (lw > 0 && sw > 0) {\n        // draw shadow in two steps\n        var w = sw / 2;\n        ctx.lineWidth = w;\n        ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n        plotPoints(series.datapoints, radius, null, w + w / 2, true, series.xaxis, series.yaxis, symbol);\n        ctx.strokeStyle = \"rgba(0,0,0,0.2)\";\n        plotPoints(series.datapoints, radius, null, w / 2, true, series.xaxis, series.yaxis, symbol);\n      }\n\n      ctx.lineWidth = lw;\n      ctx.strokeStyle = series.color;\n      plotPoints(series.datapoints, radius, getFillStyle(series.points, series.color), 0, false, series.xaxis, series.yaxis, symbol);\n      ctx.restore();\n    }\n\n    function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {\n      var left, right, bottom, top, drawLeft, drawRight, drawTop, drawBottom, tmp; // in horizontal mode, we start the bar from the left\n      // instead of from the bottom so it appears to be\n      // horizontal rather than vertical\n\n      if (horizontal) {\n        drawBottom = drawRight = drawTop = true;\n        drawLeft = false;\n        left = b;\n        right = x;\n        top = y + barLeft;\n        bottom = y + barRight; // account for negative bars\n\n        if (right < left) {\n          tmp = right;\n          right = left;\n          left = tmp;\n          drawLeft = true;\n          drawRight = false;\n        }\n      } else {\n        drawLeft = drawRight = drawTop = true;\n        drawBottom = false;\n        left = x + barLeft;\n        right = x + barRight;\n        bottom = b;\n        top = y; // account for negative bars\n\n        if (top < bottom) {\n          tmp = top;\n          top = bottom;\n          bottom = tmp;\n          drawBottom = true;\n          drawTop = false;\n        }\n      } // clip\n\n\n      if (right < axisx.min || left > axisx.max || top < axisy.min || bottom > axisy.max) return;\n\n      if (left < axisx.min) {\n        left = axisx.min;\n        drawLeft = false;\n      }\n\n      if (right > axisx.max) {\n        right = axisx.max;\n        drawRight = false;\n      }\n\n      if (bottom < axisy.min) {\n        bottom = axisy.min;\n        drawBottom = false;\n      }\n\n      if (top > axisy.max) {\n        top = axisy.max;\n        drawTop = false;\n      }\n\n      left = axisx.p2c(left);\n      bottom = axisy.p2c(bottom);\n      right = axisx.p2c(right);\n      top = axisy.p2c(top); // fill the bar\n\n      if (fillStyleCallback) {\n        c.fillStyle = fillStyleCallback(bottom, top);\n        c.fillRect(left, top, right - left, bottom - top);\n      } // draw outline\n\n\n      if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {\n        c.beginPath(); // FIXME: inline moveTo is buggy with excanvas\n\n        c.moveTo(left, bottom);\n        if (drawLeft) c.lineTo(left, top);else c.moveTo(left, top);\n        if (drawTop) c.lineTo(right, top);else c.moveTo(right, top);\n        if (drawRight) c.lineTo(right, bottom);else c.moveTo(right, bottom);\n        if (drawBottom) c.lineTo(left, bottom);else c.moveTo(left, bottom);\n        c.stroke();\n      }\n    }\n\n    function drawSeriesBars(series) {\n      function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {\n        var points = datapoints.points,\n            ps = datapoints.pointsize;\n\n        for (var i = 0; i < points.length; i += ps) {\n          if (points[i] == null) continue;\n          drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);\n        }\n      }\n\n      ctx.save();\n      ctx.translate(plotOffset.left, plotOffset.top); // FIXME: figure out a way to add shadows (for instance along the right edge)\n\n      ctx.lineWidth = series.bars.lineWidth;\n      ctx.strokeStyle = series.color;\n      var barLeft;\n\n      switch (series.bars.align) {\n        case \"left\":\n          barLeft = 0;\n          break;\n\n        case \"right\":\n          barLeft = -series.bars.barWidth;\n          break;\n\n        default:\n          barLeft = -series.bars.barWidth / 2;\n      }\n\n      var fillStyleCallback = series.bars.fill ? function (bottom, top) {\n        return getFillStyle(series.bars, series.color, bottom, top);\n      } : null;\n      plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);\n      ctx.restore();\n    }\n\n    function getFillStyle(filloptions, seriesColor, bottom, top) {\n      var fill = filloptions.fill;\n      if (!fill) return null;\n      if (filloptions.fillColor) return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);\n      var c = $.color.parse(seriesColor);\n      c.a = typeof fill == \"number\" ? fill : 0.4;\n      c.normalize();\n      return c.toString();\n    }\n\n    function insertLegend() {\n      if (options.legend.container != null) {\n        $(options.legend.container).html(\"\");\n      } else {\n        placeholder.find(\".legend\").remove();\n      }\n\n      if (!options.legend.show) {\n        return;\n      }\n\n      var fragments = [],\n          entries = [],\n          rowStarted = false,\n          lf = options.legend.labelFormatter,\n          s,\n          label; // Build a list of legend entries, with each having a label and a color\n\n      for (var i = 0; i < series.length; ++i) {\n        s = series[i];\n\n        if (s.label) {\n          label = lf ? lf(s.label, s) : s.label;\n\n          if (label) {\n            entries.push({\n              label: label,\n              color: s.color\n            });\n          }\n        }\n      } // Sort the legend using either the default or a custom comparator\n\n\n      if (options.legend.sorted) {\n        if ($.isFunction(options.legend.sorted)) {\n          entries.sort(options.legend.sorted);\n        } else if (options.legend.sorted == \"reverse\") {\n          entries.reverse();\n        } else {\n          var ascending = options.legend.sorted != \"descending\";\n          entries.sort(function (a, b) {\n            return a.label == b.label ? 0 : a.label < b.label != ascending ? 1 : -1 // Logical XOR\n            ;\n          });\n        }\n      } // Generate markup for the list of entries, in their final order\n\n\n      for (var i = 0; i < entries.length; ++i) {\n        var entry = entries[i];\n\n        if (i % options.legend.noColumns == 0) {\n          if (rowStarted) fragments.push('</tr>');\n          fragments.push('<tr>');\n          rowStarted = true;\n        }\n\n        fragments.push('<td class=\"legendColorBox\"><div style=\"border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px\"><div style=\"width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden\"></div></div></td>' + '<td class=\"legendLabel\">' + entry.label + '</td>');\n      }\n\n      if (rowStarted) fragments.push('</tr>');\n      if (fragments.length == 0) return;\n      var table = '<table style=\"font-size:smaller;color:' + options.grid.color + '\">' + fragments.join(\"\") + '</table>';\n      if (options.legend.container != null) $(options.legend.container).html(table);else {\n        var pos = \"\",\n            p = options.legend.position,\n            m = options.legend.margin;\n        if (m[0] == null) m = [m, m];\n        if (p.charAt(0) == \"n\") pos += 'top:' + (m[1] + plotOffset.top) + 'px;';else if (p.charAt(0) == \"s\") pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';\n        if (p.charAt(1) == \"e\") pos += 'right:' + (m[0] + plotOffset.right) + 'px;';else if (p.charAt(1) == \"w\") pos += 'left:' + (m[0] + plotOffset.left) + 'px;';\n        var legend = $('<div class=\"legend\">' + table.replace('style=\"', 'style=\"position:absolute;' + pos + ';') + '</div>').appendTo(placeholder);\n\n        if (options.legend.backgroundOpacity != 0.0) {\n          // put in the transparent background\n          // separately to avoid blended labels and\n          // label boxes\n          var c = options.legend.backgroundColor;\n\n          if (c == null) {\n            c = options.grid.backgroundColor;\n            if (c && typeof c == \"string\") c = $.color.parse(c);else c = $.color.extract(legend, 'background-color');\n            c.a = 1;\n            c = c.toString();\n          }\n\n          var div = legend.children();\n          $('<div style=\"position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos + 'background-color:' + c + ';\"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);\n        }\n      }\n    } // interactive features\n\n\n    var highlights = [],\n        redrawTimeout = null; // returns the data item the mouse is over, or null if none is found\n\n    function findNearbyItem(mouseX, mouseY, seriesFilter) {\n      var maxDistance = options.grid.mouseActiveRadius,\n          smallestDistance = maxDistance * maxDistance + 1,\n          item = null,\n          foundPoint = false,\n          i,\n          j,\n          ps;\n\n      for (i = series.length - 1; i >= 0; --i) {\n        if (!seriesFilter(series[i])) continue;\n        var s = series[i],\n            axisx = s.xaxis,\n            axisy = s.yaxis,\n            points = s.datapoints.points,\n            mx = axisx.c2p(mouseX),\n            // precompute some stuff to make the loop faster\n        my = axisy.c2p(mouseY),\n            maxx = maxDistance / axisx.scale,\n            maxy = maxDistance / axisy.scale;\n        ps = s.datapoints.pointsize; // with inverse transforms, we can't use the maxx/maxy\n        // optimization, sadly\n\n        if (axisx.options.inverseTransform) maxx = Number.MAX_VALUE;\n        if (axisy.options.inverseTransform) maxy = Number.MAX_VALUE;\n\n        if (s.lines.show || s.points.show) {\n          for (j = 0; j < points.length; j += ps) {\n            var x = points[j],\n                y = points[j + 1];\n            if (x == null) continue; // For points and lines, the cursor must be within a\n            // certain distance to the data point\n\n            if (x - mx > maxx || x - mx < -maxx || y - my > maxy || y - my < -maxy) continue; // We have to calculate distances in pixels, not in\n            // data units, because the scales of the axes may be different\n\n            var dx = Math.abs(axisx.p2c(x) - mouseX),\n                dy = Math.abs(axisy.p2c(y) - mouseY),\n                dist = dx * dx + dy * dy; // we save the sqrt\n            // use <= to ensure last point takes precedence\n            // (last generally means on top of)\n\n            if (dist < smallestDistance) {\n              smallestDistance = dist;\n              item = [i, j / ps];\n            }\n          }\n        }\n\n        if (s.bars.show && !item) {\n          // no other point can be nearby\n          var barLeft, barRight;\n\n          switch (s.bars.align) {\n            case \"left\":\n              barLeft = 0;\n              break;\n\n            case \"right\":\n              barLeft = -s.bars.barWidth;\n              break;\n\n            default:\n              barLeft = -s.bars.barWidth / 2;\n          }\n\n          barRight = barLeft + s.bars.barWidth;\n\n          for (j = 0; j < points.length; j += ps) {\n            var x = points[j],\n                y = points[j + 1],\n                b = points[j + 2];\n            if (x == null) continue; // for a bar graph, the cursor must be inside the bar\n\n            if (series[i].bars.horizontal ? mx <= Math.max(b, x) && mx >= Math.min(b, x) && my >= y + barLeft && my <= y + barRight : mx >= x + barLeft && mx <= x + barRight && my >= Math.min(b, y) && my <= Math.max(b, y)) item = [i, j / ps];\n          }\n        }\n      }\n\n      if (item) {\n        i = item[0];\n        j = item[1];\n        ps = series[i].datapoints.pointsize;\n        return {\n          datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),\n          dataIndex: j,\n          series: series[i],\n          seriesIndex: i\n        };\n      }\n\n      return null;\n    }\n\n    function onMouseMove(e) {\n      if (options.grid.hoverable) triggerClickHoverEvent(\"plothover\", e, function (s) {\n        return s[\"hoverable\"] != false;\n      });\n    }\n\n    function onMouseLeave(e) {\n      if (options.grid.hoverable) triggerClickHoverEvent(\"plothover\", e, function (s) {\n        return false;\n      });\n    }\n\n    function onClick(e) {\n      triggerClickHoverEvent(\"plotclick\", e, function (s) {\n        return s[\"clickable\"] != false;\n      });\n    } // trigger click or hover event (they send the same parameters\n    // so we share their code)\n\n\n    function triggerClickHoverEvent(eventname, event, seriesFilter) {\n      var offset = eventHolder.offset(),\n          canvasX = event.pageX - offset.left - plotOffset.left,\n          canvasY = event.pageY - offset.top - plotOffset.top,\n          pos = canvasToAxisCoords({\n        left: canvasX,\n        top: canvasY\n      });\n      pos.pageX = event.pageX;\n      pos.pageY = event.pageY;\n      var item = findNearbyItem(canvasX, canvasY, seriesFilter);\n\n      if (item) {\n        // fill in mouse pos for any listeners out there\n        item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);\n        item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);\n      }\n\n      if (options.grid.autoHighlight) {\n        // clear auto-highlights\n        for (var i = 0; i < highlights.length; ++i) {\n          var h = highlights[i];\n          if (h.auto == eventname && !(item && h.series == item.series && h.point[0] == item.datapoint[0] && h.point[1] == item.datapoint[1])) unhighlight(h.series, h.point);\n        }\n\n        if (item) highlight(item.series, item.datapoint, eventname);\n      }\n\n      placeholder.trigger(eventname, [pos, item]);\n    }\n\n    function triggerRedrawOverlay() {\n      var t = options.interaction.redrawOverlayInterval;\n\n      if (t == -1) {\n        // skip event queue\n        drawOverlay();\n        return;\n      }\n\n      if (!redrawTimeout) redrawTimeout = setTimeout(drawOverlay, t);\n    }\n\n    function drawOverlay() {\n      redrawTimeout = null; // draw highlights\n\n      octx.save();\n      overlay.clear();\n      octx.translate(plotOffset.left, plotOffset.top);\n      var i, hi;\n\n      for (i = 0; i < highlights.length; ++i) {\n        hi = highlights[i];\n        if (hi.series.bars.show) drawBarHighlight(hi.series, hi.point);else drawPointHighlight(hi.series, hi.point);\n      }\n\n      octx.restore();\n      executeHooks(hooks.drawOverlay, [octx]);\n    }\n\n    function highlight(s, point, auto) {\n      if (typeof s == \"number\") s = series[s];\n\n      if (typeof point == \"number\") {\n        var ps = s.datapoints.pointsize;\n        point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n      }\n\n      var i = indexOfHighlight(s, point);\n\n      if (i == -1) {\n        highlights.push({\n          series: s,\n          point: point,\n          auto: auto\n        });\n        triggerRedrawOverlay();\n      } else if (!auto) highlights[i].auto = false;\n    }\n\n    function unhighlight(s, point) {\n      if (s == null && point == null) {\n        highlights = [];\n        triggerRedrawOverlay();\n        return;\n      }\n\n      if (typeof s == \"number\") s = series[s];\n\n      if (typeof point == \"number\") {\n        var ps = s.datapoints.pointsize;\n        point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n      }\n\n      var i = indexOfHighlight(s, point);\n\n      if (i != -1) {\n        highlights.splice(i, 1);\n        triggerRedrawOverlay();\n      }\n    }\n\n    function indexOfHighlight(s, p) {\n      for (var i = 0; i < highlights.length; ++i) {\n        var h = highlights[i];\n        if (h.series == s && h.point[0] == p[0] && h.point[1] == p[1]) return i;\n      }\n\n      return -1;\n    }\n\n    function drawPointHighlight(series, point) {\n      var x = point[0],\n          y = point[1],\n          axisx = series.xaxis,\n          axisy = series.yaxis,\n          highlightColor = typeof series.highlightColor === \"string\" ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();\n      if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max) return;\n      var pointRadius = series.points.radius + series.points.lineWidth / 2;\n      octx.lineWidth = pointRadius;\n      octx.strokeStyle = highlightColor;\n      var radius = 1.5 * pointRadius;\n      x = axisx.p2c(x);\n      y = axisy.p2c(y);\n      octx.beginPath();\n      if (series.points.symbol == \"circle\") octx.arc(x, y, radius, 0, 2 * Math.PI, false);else series.points.symbol(octx, x, y, radius, false);\n      octx.closePath();\n      octx.stroke();\n    }\n\n    function drawBarHighlight(series, point) {\n      var highlightColor = typeof series.highlightColor === \"string\" ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),\n          fillStyle = highlightColor,\n          barLeft;\n\n      switch (series.bars.align) {\n        case \"left\":\n          barLeft = 0;\n          break;\n\n        case \"right\":\n          barLeft = -series.bars.barWidth;\n          break;\n\n        default:\n          barLeft = -series.bars.barWidth / 2;\n      }\n\n      octx.lineWidth = series.bars.lineWidth;\n      octx.strokeStyle = highlightColor;\n      drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth, function () {\n        return fillStyle;\n      }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);\n    }\n\n    function getColorOrGradient(spec, bottom, top, defaultColor) {\n      if (typeof spec == \"string\") return spec;else {\n        // assume this is a gradient spec; IE currently only\n        // supports a simple vertical gradient properly, so that's\n        // what we support too\n        var gradient = ctx.createLinearGradient(0, top, 0, bottom);\n\n        for (var i = 0, l = spec.colors.length; i < l; ++i) {\n          var c = spec.colors[i];\n\n          if (typeof c != \"string\") {\n            var co = $.color.parse(defaultColor);\n            if (c.brightness != null) co = co.scale('rgb', c.brightness);\n            if (c.opacity != null) co.a *= c.opacity;\n            c = co.toString();\n          }\n\n          gradient.addColorStop(i / (l - 1), c);\n        }\n\n        return gradient;\n      }\n    }\n  } // Add the plot function to the top level of the jQuery object\n\n\n  $.plot = function (placeholder, data, options) {\n    //var t0 = new Date();\n    var plot = new Plot($(placeholder), data, options, $.plot.plugins); //(window.console ? console.log : alert)(\"time used (msecs): \" + ((new Date()).getTime() - t0.getTime()));\n\n    return plot;\n  };\n\n  $.plot.version = \"0.8.3\";\n  $.plot.plugins = []; // Also add the plot function as a chainable property\n\n  $.fn.plot = function (data, options) {\n    return this.each(function () {\n      $.plot(this, data, options);\n    });\n  }; // round to nearby lower multiple of base\n\n\n  function floorInBase(n, base) {\n    return base * Math.floor(n / base);\n  }\n})(jQuery);",{"version":3,"sources":["src\\assets\\js\\jquery.flot.js"],"names":["$","color","make","r","g","b","a","o","add","c","d","i","length","charAt","normalize","scale","f","toString","join","clamp","min","value","max","parseInt","clone","extract","elem","css","toLowerCase","parent","nodeName","get","parse","str","res","m","exec","parseFloat","name","trim","lookupColors","aqua","azure","beige","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightcyan","lightgreen","lightgrey","lightpink","lightyellow","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","white","yellow","jQuery","hasOwnProperty","Object","prototype","fn","detach","each","parentNode","removeChild","Canvas","cls","container","element","children","document","createElement","className","direction","position","left","top","appendTo","getContext","window","G_vmlCanvasManager","initElement","Error","context","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","resize","width","height","textContainer","text","_textCache","style","restore","save","clear","clearRect","render","cache","layerKey","call","layer","getTextLayer","layerCache","hide","styleKey","styleCache","key","positions","active","rendered","append","splice","show","classes","bottom","right","insertAfter","addClass","getTextInfo","font","angle","textStyle","info","variant","weight","size","lineHeight","family","html","outerWidth","outerHeight","addText","x","y","halign","valign","push","Math","round","removeText","Plot","placeholder","data_","options_","plugins","series","options","colors","legend","noColumns","labelFormatter","labelBoxBorderColor","margin","backgroundColor","backgroundOpacity","sorted","xaxis","mode","tickColor","transform","inverseTransform","autoscaleMargin","ticks","tickFormatter","labelWidth","labelHeight","reserveSpace","tickLength","alignTicksWithAxis","tickDecimals","tickSize","minTickSize","yaxis","xaxes","yaxes","points","radius","lineWidth","fill","fillColor","symbol","lines","steps","bars","barWidth","align","horizontal","zero","shadowSize","highlightColor","grid","aboveData","borderColor","labelMargin","axisMargin","borderWidth","minBorderMargin","markings","markingsColor","markingsLineWidth","clickable","hoverable","autoHighlight","mouseActiveRadius","interaction","redrawOverlayInterval","hooks","surface","overlay","eventHolder","ctx","octx","plotOffset","plotWidth","plotHeight","processOptions","processRawData","processDatapoints","processOffset","drawBackground","drawSeries","draw","bindEvents","drawOverlay","shutdown","plot","setData","setupGrid","getPlaceholder","getCanvas","getPlotOffset","offset","getData","getAxes","concat","_","axis","n","getXAxes","getYAxes","c2p","canvasToAxisCoords","p2c","axisToCanvasCoords","getOptions","highlight","unhighlight","triggerRedrawOverlay","pointOffset","point","axisNumber","destroy","removeData","empty","highlights","initPlugins","parseOptions","setupCanvases","executeHooks","hook","args","apply","p","init","extend","opts","axisOptions","axisCount","fontSize","fontSizeDefault","replace","fontDefaults","noTicks","x2axis","y2axis","coloredAreas","coloredAreasColor","getOrCreateAxis","parseData","fillInSeriesOptions","processData","s","data","obj","coord","allAxes","grep","pos","used","x1","undefined","y1","axes","number","neededColors","maxIndex","sc","colorPool","colorPoolSize","variation","colori","v","topSentry","Number","POSITIVE_INFINITY","bottomSentry","NEGATIVE_INFINITY","fakeInfinity","MAX_VALUE","j","k","ps","val","format","updateAxis","datamin","datamax","datapoints","required","autoscale","defaultValue","pointsize","insertSteps","nullify","isNaN","Infinity","xmin","ymin","xmax","ymax","delta","filter","hasClass","remove","unbind","existing","mousemove","onMouseMove","bind","onMouseLeave","click","onClick","redrawTimeout","clearTimeout","setTransformationHelpers","identity","t","it","abs","measureTickLabels","maxWidth","floor","legacyStyles","label","allocateAxisBoxFirstPhase","lw","lh","isXAxis","padding","innermost","outermost","first","found","box","allocateAxisBoxSecondPhase","adjustLayoutForThingsStickingOut","minMargin","margins","ceil","showGrid","axisOpts","setRange","allocatedAxes","setupTickGeneration","setTicks","snapRangeToTicks","drawAxisLabels","insertLegend","widen","sqrt","dec","log","LN10","maxDec","magn","pow","norm","tickGenerator","start","floorInBase","NaN","prev","factor","formatted","decimal","indexOf","precision","substr","isFunction","otherAxis","niceTicks","extraDec","ts","test","toFixed","oticks","drawGrid","extractRange","ranges","from","to","tmp","translate","fillStyle","getColorOrGradient","fillRect","bw","bc","xrange","yrange","xequal","yequal","subPixel","beginPath","strokeStyle","moveTo","lineTo","stroke","xoff","yoff","strokeRect","tick","drawSeriesLines","drawSeriesBars","drawSeriesPoints","plotLine","xoffset","yoffset","axisx","axisy","prevx","prevy","x2","y2","plotLineArea","areaOpen","ypos","segmentStart","segmentEnd","x1old","x2old","lineJoin","sw","PI","sin","cos","getFillStyle","plotPoints","shadow","arc","closePath","w","drawBar","barLeft","barRight","fillStyleCallback","drawLeft","drawRight","drawTop","drawBottom","plotBars","filloptions","seriesColor","find","fragments","entries","rowStarted","lf","sort","reverse","ascending","entry","table","div","prependTo","findNearbyItem","mouseX","mouseY","seriesFilter","maxDistance","smallestDistance","item","foundPoint","mx","my","maxx","maxy","dx","dy","dist","datapoint","slice","dataIndex","seriesIndex","e","triggerClickHoverEvent","eventname","event","canvasX","pageX","canvasY","pageY","h","auto","trigger","setTimeout","hi","drawBarHighlight","drawPointHighlight","indexOfHighlight","pointRadius","spec","defaultColor","gradient","createLinearGradient","l","co","brightness","opacity","addColorStop","version","base"],"mappings":"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","sourceRoot":"C:\\Users\\tedu\\Desktop\\VueJs\\xz_admin_v2","sourcesContent":["/* Javascript plotting library for jQuery, version 0.8.3.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\n*/\n\n// first an inline dependency, jquery.colorhelpers.js, we inline it here\n// for convenience\n\n/* Plugin for jQuery for working with colors.\n *\n * Version 1.1.\n *\n * Inspiration from jQuery color animation plugin by John Resig.\n *\n * Released under the MIT license by Ole Laursen, October 2009.\n *\n * Examples:\n *\n *   $.color.parse(\"#fff\").scale('rgb', 0.25).add('a', -0.5).toString()\n *   var c = $.color.extract($(\"#mydiv\"), 'background-color');\n *   console.log(c.r, c.g, c.b, c.a);\n *   $.color.make(100, 50, 25, 0.4).toString() // returns \"rgba(100,50,25,0.4)\"\n *\n * Note that .scale() and .add() return the same modified object\n * instead of making a new one.\n *\n * V. 1.1: Fix error handling so e.g. parsing an empty string does\n * produce a color rather than just crashing.\n */\n(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return\"rgb(\"+[o.r,o.g,o.b].join(\",\")+\")\"}else{return\"rgba(\"+[o.r,o.g,o.b,o.a].join(\",\")+\")\"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=\"\"&&c!=\"transparent\")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),\"body\"));if(c==\"rgba(0, 0, 0, 0)\")c=\"transparent\";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name==\"transparent\")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);\n\n// the actual Flot code\n(function($) {\n\n\t// Cache the prototype hasOwnProperty for faster access\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    // A shim to provide 'detach' to jQuery versions prior to 1.4.  Using a DOM\n    // operation produces the same effect as detach, i.e. removing the element\n    // without touching its jQuery data.\n\n    // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.\n\n    if (!$.fn.detach) {\n        $.fn.detach = function() {\n            return this.each(function() {\n                if (this.parentNode) {\n                    this.parentNode.removeChild( this );\n                }\n            });\n        };\n    }\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// The Canvas object is a wrapper around an HTML5 <canvas> tag.\n\t//\n\t// @constructor\n\t// @param {string} cls List of classes to apply to the canvas.\n\t// @param {element} container Element onto which to append the canvas.\n\t//\n\t// Requiring a container is a little iffy, but unfortunately canvas\n\t// operations don't work unless the canvas is attached to the DOM.\n\n\tfunction Canvas(cls, container) {\n\n\t\tvar element = container.children(\".\" + cls)[0];\n\n\t\tif (element == null) {\n\n\t\t\telement = document.createElement(\"canvas\");\n\t\t\telement.className = cls;\n\n\t\t\t$(element).css({ direction: \"ltr\", position: \"absolute\", left: 0, top: 0 })\n\t\t\t\t.appendTo(container);\n\n\t\t\t// If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas\n\n\t\t\tif (!element.getContext) {\n\t\t\t\tif (window.G_vmlCanvasManager) {\n\t\t\t\t\telement = window.G_vmlCanvasManager.initElement(element);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element = element;\n\n\t\tvar context = this.context = element.getContext(\"2d\");\n\n\t\t// Determine the screen's ratio of physical to device-independent\n\t\t// pixels.  This is the ratio between the canvas width that the browser\n\t\t// advertises and the number of pixels actually present in that space.\n\n\t\t// The iPhone 4, for example, has a device-independent width of 320px,\n\t\t// but its screen is actually 640px wide.  It therefore has a pixel\n\t\t// ratio of 2, while most normal devices have a ratio of 1.\n\n\t\tvar devicePixelRatio = window.devicePixelRatio || 1,\n\t\t\tbackingStoreRatio =\n\t\t\t\tcontext.webkitBackingStorePixelRatio ||\n\t\t\t\tcontext.mozBackingStorePixelRatio ||\n\t\t\t\tcontext.msBackingStorePixelRatio ||\n\t\t\t\tcontext.oBackingStorePixelRatio ||\n\t\t\t\tcontext.backingStorePixelRatio || 1;\n\n\t\tthis.pixelRatio = devicePixelRatio / backingStoreRatio;\n\n\t\t// Size the canvas to match the internal dimensions of its container\n\n\t\tthis.resize(container.width(), container.height());\n\n\t\t// Collection of HTML div layers for text overlaid onto the canvas\n\n\t\tthis.textContainer = null;\n\t\tthis.text = {};\n\n\t\t// Cache of text fragments and metrics, so we can avoid expensively\n\t\t// re-calculating them when the plot is re-rendered in a loop.\n\n\t\tthis._textCache = {};\n\t}\n\n\t// Resizes the canvas to the given dimensions.\n\t//\n\t// @param {number} width New width of the canvas, in pixels.\n\t// @param {number} width New height of the canvas, in pixels.\n\n\tCanvas.prototype.resize = function(width, height) {\n\n\t\tif (width <= 0 || height <= 0) {\n\t\t\tthrow new Error(\"Invalid dimensions for plot, width = \" + width + \", height = \" + height);\n\t\t}\n\n\t\tvar element = this.element,\n\t\t\tcontext = this.context,\n\t\t\tpixelRatio = this.pixelRatio;\n\n\t\t// Resize the canvas, increasing its density based on the display's\n\t\t// pixel ratio; basically giving it more pixels without increasing the\n\t\t// size of its element, to take advantage of the fact that retina\n\t\t// displays have that many more pixels in the same advertised space.\n\n\t\t// Resizing should reset the state (excanvas seems to be buggy though)\n\n\t\tif (this.width != width) {\n\t\t\telement.width = width * pixelRatio;\n\t\t\telement.style.width = width + \"px\";\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tif (this.height != height) {\n\t\t\telement.height = height * pixelRatio;\n\t\t\telement.style.height = height + \"px\";\n\t\t\tthis.height = height;\n\t\t}\n\n\t\t// Save the context, so we can reset in case we get replotted.  The\n\t\t// restore ensure that we're really back at the initial state, and\n\t\t// should be safe even if we haven't saved the initial state yet.\n\n\t\tcontext.restore();\n\t\tcontext.save();\n\n\t\t// Scale the coordinate space to match the display density; so even though we\n\t\t// may have twice as many pixels, we still want lines and other drawing to\n\t\t// appear at the same size; the extra pixels will just make them crisper.\n\n\t\tcontext.scale(pixelRatio, pixelRatio);\n\t};\n\n\t// Clears the entire canvas area, not including any overlaid HTML text\n\n\tCanvas.prototype.clear = function() {\n\t\tthis.context.clearRect(0, 0, this.width, this.height);\n\t};\n\n\t// Finishes rendering the canvas, including managing the text overlay.\n\n\tCanvas.prototype.render = function() {\n\n\t\tvar cache = this._textCache;\n\n\t\t// For each text layer, add elements marked as active that haven't\n\t\t// already been rendered, and remove those that are no longer active.\n\n\t\tfor (var layerKey in cache) {\n\t\t\tif (hasOwnProperty.call(cache, layerKey)) {\n\n\t\t\t\tvar layer = this.getTextLayer(layerKey),\n\t\t\t\t\tlayerCache = cache[layerKey];\n\n\t\t\t\tlayer.hide();\n\n\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\tif (position.active) {\n\t\t\t\t\t\t\t\t\t\tif (!position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\tlayer.append(position.element);\n\t\t\t\t\t\t\t\t\t\t\tposition.rendered = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tpositions.splice(i--, 1);\n\t\t\t\t\t\t\t\t\t\tif (position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\tposition.element.detach();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (positions.length == 0) {\n\t\t\t\t\t\t\t\t\tdelete styleCache[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlayer.show();\n\t\t\t}\n\t\t}\n\t};\n\n\t// Creates (if necessary) and returns the text overlay container.\n\t//\n\t// @param {string} classes String of space-separated CSS classes used to\n\t//     uniquely identify the text layer.\n\t// @return {object} The jQuery-wrapped text-layer div.\n\n\tCanvas.prototype.getTextLayer = function(classes) {\n\n\t\tvar layer = this.text[classes];\n\n\t\t// Create the text layer if it doesn't exist\n\n\t\tif (layer == null) {\n\n\t\t\t// Create the text layer container, if it doesn't exist\n\n\t\t\tif (this.textContainer == null) {\n\t\t\t\tthis.textContainer = $(\"<div class='flot-text'></div>\")\n\t\t\t\t\t.css({\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\t'font-size': \"smaller\",\n\t\t\t\t\t\tcolor: \"#545454\"\n\t\t\t\t\t})\n\t\t\t\t\t.insertAfter(this.element);\n\t\t\t}\n\n\t\t\tlayer = this.text[classes] = $(\"<div></div>\")\n\t\t\t\t.addClass(classes)\n\t\t\t\t.css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tright: 0\n\t\t\t\t})\n\t\t\t\t.appendTo(this.textContainer);\n\t\t}\n\n\t\treturn layer;\n\t};\n\n\t// Creates (if necessary) and returns a text info object.\n\t//\n\t// The object looks like this:\n\t//\n\t// {\n\t//     width: Width of the text's wrapper div.\n\t//     height: Height of the text's wrapper div.\n\t//     element: The jQuery-wrapped HTML div containing the text.\n\t//     positions: Array of positions at which this text is drawn.\n\t// }\n\t//\n\t// The positions array contains objects that look like this:\n\t//\n\t// {\n\t//     active: Flag indicating whether the text should be visible.\n\t//     rendered: Flag indicating whether the text is currently visible.\n\t//     element: The jQuery-wrapped HTML div containing the text.\n\t//     x: X coordinate at which to draw the text.\n\t//     y: Y coordinate at which to draw the text.\n\t// }\n\t//\n\t// Each position after the first receives a clone of the original element.\n\t//\n\t// The idea is that that the width, height, and general 'identity' of the\n\t// text is constant no matter where it is placed; the placements are a\n\t// secondary property.\n\t//\n\t// Canvas maintains a cache of recently-used text info objects; getTextInfo\n\t// either returns the cached element or creates a new entry.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {string} text Text string to retrieve info for.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\t// @param {number=} width Maximum width of the text before it wraps.\n\t// @return {object} a text info object.\n\n\tCanvas.prototype.getTextInfo = function(layer, text, font, angle, width) {\n\n\t\tvar textStyle, layerCache, styleCache, info;\n\n\t\t// Cast the value to a string, in case we were given a number or such\n\n\t\ttext = \"\" + text;\n\n\t\t// If the font is a font-spec object, generate a CSS font definition\n\n\t\tif (typeof font === \"object\") {\n\t\t\ttextStyle = font.style + \" \" + font.variant + \" \" + font.weight + \" \" + font.size + \"px/\" + font.lineHeight + \"px \" + font.family;\n\t\t} else {\n\t\t\ttextStyle = font;\n\t\t}\n\n\t\t// Retrieve (or create) the cache for the text's layer and styles\n\n\t\tlayerCache = this._textCache[layer];\n\n\t\tif (layerCache == null) {\n\t\t\tlayerCache = this._textCache[layer] = {};\n\t\t}\n\n\t\tstyleCache = layerCache[textStyle];\n\n\t\tif (styleCache == null) {\n\t\t\tstyleCache = layerCache[textStyle] = {};\n\t\t}\n\n\t\tinfo = styleCache[text];\n\n\t\t// If we can't find a matching element in our cache, create a new one\n\n\t\tif (info == null) {\n\n\t\t\tvar element = $(\"<div></div>\").html(text)\n\t\t\t\t.css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t'max-width': width,\n\t\t\t\t\ttop: -9999\n\t\t\t\t})\n\t\t\t\t.appendTo(this.getTextLayer(layer));\n\n\t\t\tif (typeof font === \"object\") {\n\t\t\t\telement.css({\n\t\t\t\t\tfont: textStyle,\n\t\t\t\t\tcolor: font.color\n\t\t\t\t});\n\t\t\t} else if (typeof font === \"string\") {\n\t\t\t\telement.addClass(font);\n\t\t\t}\n\n\t\t\tinfo = styleCache[text] = {\n\t\t\t\twidth: element.outerWidth(true),\n\t\t\t\theight: element.outerHeight(true),\n\t\t\t\telement: element,\n\t\t\t\tpositions: []\n\t\t\t};\n\n\t\t\telement.detach();\n\t\t}\n\n\t\treturn info;\n\t};\n\n\t// Adds a text string to the canvas text overlay.\n\t//\n\t// The text isn't drawn immediately; it is marked as rendering, which will\n\t// result in its addition to the canvas on the next render pass.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {number} x X coordinate at which to draw the text.\n\t// @param {number} y Y coordinate at which to draw the text.\n\t// @param {string} text Text string to draw.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\t// @param {number=} width Maximum width of the text before it wraps.\n\t// @param {string=} halign Horizontal alignment of the text; either \"left\",\n\t//     \"center\" or \"right\".\n\t// @param {string=} valign Vertical alignment of the text; either \"top\",\n\t//     \"middle\" or \"bottom\".\n\n\tCanvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {\n\n\t\tvar info = this.getTextInfo(layer, text, font, angle, width),\n\t\t\tpositions = info.positions;\n\n\t\t// Tweak the div's position to match the text's alignment\n\n\t\tif (halign == \"center\") {\n\t\t\tx -= info.width / 2;\n\t\t} else if (halign == \"right\") {\n\t\t\tx -= info.width;\n\t\t}\n\n\t\tif (valign == \"middle\") {\n\t\t\ty -= info.height / 2;\n\t\t} else if (valign == \"bottom\") {\n\t\t\ty -= info.height;\n\t\t}\n\n\t\t// Determine whether this text already exists at this position.\n\t\t// If so, mark it for inclusion in the next render pass.\n\n\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\tposition.active = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If the text doesn't exist at this position, create a new entry\n\n\t\t// For the very first position we'll re-use the original element,\n\t\t// while for subsequent ones we'll clone it.\n\n\t\tposition = {\n\t\t\tactive: true,\n\t\t\trendered: false,\n\t\t\telement: positions.length ? info.element.clone() : info.element,\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\n\t\tpositions.push(position);\n\n\t\t// Move the element to its final position within the container\n\n\t\tposition.element.css({\n\t\t\ttop: Math.round(y),\n\t\t\tleft: Math.round(x),\n\t\t\t'text-align': halign\t// In case the text wraps\n\t\t});\n\t};\n\n\t// Removes one or more text strings from the canvas text overlay.\n\t//\n\t// If no parameters are given, all text within the layer is removed.\n\t//\n\t// Note that the text is not immediately removed; it is simply marked as\n\t// inactive, which will result in its removal on the next render pass.\n\t// This avoids the performance penalty for 'clear and redraw' behavior,\n\t// where we potentially get rid of all text on a layer, but will likely\n\t// add back most or all of it later, as when redrawing axes, for example.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {number=} x X coordinate of the text.\n\t// @param {number=} y Y coordinate of the text.\n\t// @param {string=} text Text string to remove.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which the text is rotated, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\n\tCanvas.prototype.removeText = function(layer, x, y, text, font, angle) {\n\t\tif (text == null) {\n\t\t\tvar layerCache = this._textCache[layer];\n\t\t\tif (layerCache != null) {\n\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\tposition.active = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar positions = this.getTextInfo(layer, text, font, angle).positions;\n\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\t\tposition.active = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// The top-level container for the entire plot.\n\n    function Plot(placeholder, data_, options_, plugins) {\n        // data is on the form:\n        //   [ series1, series2 ... ]\n        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]\n        // or { data: [ [x1, y1], [x2, y2], ... ], label: \"some label\", ... }\n\n        var series = [],\n            options = {\n                // the color theme used for graphs\n                colors: [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"],\n                legend: {\n                    show: true,\n                    noColumns: 1, // number of colums in legend table\n                    labelFormatter: null, // fn: string -> string\n                    labelBoxBorderColor: \"#ccc\", // border color for the little label boxes\n                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph\n                    position: \"ne\", // position of default legend container within plot\n                    margin: 5, // distance from grid edge to default legend container within plot\n                    backgroundColor: null, // null means auto-detect\n                    backgroundOpacity: 0.85, // set to 0 to avoid background\n                    sorted: null    // default to no legend sorting\n                },\n                xaxis: {\n                    show: null, // null = auto-detect, true = always, false = never\n                    position: \"bottom\", // or \"top\"\n                    mode: null, // null or \"time\"\n                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: \"italic\", weight: \"bold\", family: \"sans-serif\", variant: \"small-caps\" }\n                    color: null, // base color, labels, ticks\n                    tickColor: null, // possibly different color of ticks, e.g. \"rgba(0,0,0,0.15)\"\n                    transform: null, // null or f: number -> number to transform axis\n                    inverseTransform: null, // if transform is set, this should be the inverse function\n                    min: null, // min. value to show, null means set automatically\n                    max: null, // max. value to show, null means set automatically\n                    autoscaleMargin: null, // margin in % to add if auto-setting min/max\n                    ticks: null, // either [1, 3] or [[1, \"a\"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks\n                    tickFormatter: null, // fn: number -> string\n                    labelWidth: null, // size of tick labels in pixels\n                    labelHeight: null,\n                    reserveSpace: null, // whether to reserve space even if axis isn't shown\n                    tickLength: null, // size in pixels of ticks, or \"full\" for whole line\n                    alignTicksWithAxis: null, // axis number or null for no sync\n                    tickDecimals: null, // no. of decimals, null means auto\n                    tickSize: null, // number or [number, \"unit\"]\n                    minTickSize: null // number or [number, \"unit\"]\n                },\n                yaxis: {\n                    autoscaleMargin: 0.02,\n                    position: \"left\" // or \"right\"\n                },\n                xaxes: [],\n                yaxes: [],\n                series: {\n                    points: {\n                        show: false,\n                        radius: 3,\n                        lineWidth: 2, // in pixels\n                        fill: true,\n                        fillColor: \"#ffffff\",\n                        symbol: \"circle\" // or callback\n                    },\n                    lines: {\n                        // we don't put in show: false so we can see\n                        // whether lines were actively disabled\n                        lineWidth: 2, // in pixels\n                        fill: false,\n                        fillColor: null,\n                        steps: false\n                        // Omit 'zero', so we can later default its value to\n                        // match that of the 'fill' option.\n                    },\n                    bars: {\n                        show: false,\n                        lineWidth: 2, // in pixels\n                        barWidth: 1, // in units of the x axis\n                        fill: true,\n                        fillColor: null,\n                        align: \"left\", // \"left\", \"right\", or \"center\"\n                        horizontal: false,\n                        zero: true\n                    },\n                    shadowSize: 3,\n                    highlightColor: null\n                },\n                grid: {\n                    show: true,\n                    aboveData: false,\n                    color: \"#545454\", // primary color used for outline and labels\n                    backgroundColor: null, // null for transparent, else color\n                    borderColor: null, // set if different from the grid color\n                    tickColor: null, // color for the ticks, e.g. \"rgba(0,0,0,0.15)\"\n                    margin: 0, // distance from the canvas edge to the grid\n                    labelMargin: 5, // in pixels\n                    axisMargin: 8, // in pixels\n                    borderWidth: 2, // in pixels\n                    minBorderMargin: null, // in pixels, null means taken from points radius\n                    markings: null, // array of ranges or fn: axes -> array of ranges\n                    markingsColor: \"#f4f4f4\",\n                    markingsLineWidth: 2,\n                    // interactive stuff\n                    clickable: false,\n                    hoverable: false,\n                    autoHighlight: true, // highlight in case mouse is near\n                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item\n                },\n                interaction: {\n                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow\n                },\n                hooks: {}\n            },\n        surface = null,     // the canvas for the plot itself\n        overlay = null,     // canvas for interactive stuff on top of plot\n        eventHolder = null, // jQuery object that events should be bound to\n        ctx = null, octx = null,\n        xaxes = [], yaxes = [],\n        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},\n        plotWidth = 0, plotHeight = 0,\n        hooks = {\n            processOptions: [],\n            processRawData: [],\n            processDatapoints: [],\n            processOffset: [],\n            drawBackground: [],\n            drawSeries: [],\n            draw: [],\n            bindEvents: [],\n            drawOverlay: [],\n            shutdown: []\n        },\n        plot = this;\n\n        // public functions\n        plot.setData = setData;\n        plot.setupGrid = setupGrid;\n        plot.draw = draw;\n        plot.getPlaceholder = function() { return placeholder; };\n        plot.getCanvas = function() { return surface.element; };\n        plot.getPlotOffset = function() { return plotOffset; };\n        plot.width = function () { return plotWidth; };\n        plot.height = function () { return plotHeight; };\n        plot.offset = function () {\n            var o = eventHolder.offset();\n            o.left += plotOffset.left;\n            o.top += plotOffset.top;\n            return o;\n        };\n        plot.getData = function () { return series; };\n        plot.getAxes = function () {\n            var res = {}, i;\n            $.each(xaxes.concat(yaxes), function (_, axis) {\n                if (axis)\n                    res[axis.direction + (axis.n != 1 ? axis.n : \"\") + \"axis\"] = axis;\n            });\n            return res;\n        };\n        plot.getXAxes = function () { return xaxes; };\n        plot.getYAxes = function () { return yaxes; };\n        plot.c2p = canvasToAxisCoords;\n        plot.p2c = axisToCanvasCoords;\n        plot.getOptions = function () { return options; };\n        plot.highlight = highlight;\n        plot.unhighlight = unhighlight;\n        plot.triggerRedrawOverlay = triggerRedrawOverlay;\n        plot.pointOffset = function(point) {\n            return {\n                left: parseInt(xaxes[axisNumber(point, \"x\") - 1].p2c(+point.x) + plotOffset.left, 10),\n                top: parseInt(yaxes[axisNumber(point, \"y\") - 1].p2c(+point.y) + plotOffset.top, 10)\n            };\n        };\n        plot.shutdown = shutdown;\n        plot.destroy = function () {\n            shutdown();\n            placeholder.removeData(\"plot\").empty();\n\n            series = [];\n            options = null;\n            surface = null;\n            overlay = null;\n            eventHolder = null;\n            ctx = null;\n            octx = null;\n            xaxes = [];\n            yaxes = [];\n            hooks = null;\n            highlights = [];\n            plot = null;\n        };\n        plot.resize = function () {\n        \tvar width = placeholder.width(),\n        \t\theight = placeholder.height();\n            surface.resize(width, height);\n            overlay.resize(width, height);\n        };\n\n        // public attributes\n        plot.hooks = hooks;\n\n        // initialize\n        initPlugins(plot);\n        parseOptions(options_);\n        setupCanvases();\n        setData(data_);\n        setupGrid();\n        draw();\n        bindEvents();\n\n\n        function executeHooks(hook, args) {\n            args = [plot].concat(args);\n            for (var i = 0; i < hook.length; ++i)\n                hook[i].apply(this, args);\n        }\n\n        function initPlugins() {\n\n            // References to key classes, allowing plugins to modify them\n\n            var classes = {\n                Canvas: Canvas\n            };\n\n            for (var i = 0; i < plugins.length; ++i) {\n                var p = plugins[i];\n                p.init(plot, classes);\n                if (p.options)\n                    $.extend(true, options, p.options);\n            }\n        }\n\n        function parseOptions(opts) {\n\n            $.extend(true, options, opts);\n\n            // $.extend merges arrays, rather than replacing them.  When less\n            // colors are provided than the size of the default palette, we\n            // end up with those colors plus the remaining defaults, which is\n            // not expected behavior; avoid it by replacing them here.\n\n            if (opts && opts.colors) {\n            \toptions.colors = opts.colors;\n            }\n\n            if (options.xaxis.color == null)\n                options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n            if (options.yaxis.color == null)\n                options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\n            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility\n                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;\n            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility\n                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;\n\n            if (options.grid.borderColor == null)\n                options.grid.borderColor = options.grid.color;\n            if (options.grid.tickColor == null)\n                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\n            // Fill in defaults for axis options, including any unspecified\n            // font-spec fields, if a font-spec was provided.\n\n            // If no x/y axis options were provided, create one of each anyway,\n            // since the rest of the code assumes that they exist.\n\n            var i, axisOptions, axisCount,\n                fontSize = placeholder.css(\"font-size\"),\n                fontSizeDefault = fontSize ? +fontSize.replace(\"px\", \"\") : 13,\n                fontDefaults = {\n                    style: placeholder.css(\"font-style\"),\n                    size: Math.round(0.8 * fontSizeDefault),\n                    variant: placeholder.css(\"font-variant\"),\n                    weight: placeholder.css(\"font-weight\"),\n                    family: placeholder.css(\"font-family\")\n                };\n\n            axisCount = options.xaxes.length || 1;\n            for (i = 0; i < axisCount; ++i) {\n\n                axisOptions = options.xaxes[i];\n                if (axisOptions && !axisOptions.tickColor) {\n                    axisOptions.tickColor = axisOptions.color;\n                }\n\n                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);\n                options.xaxes[i] = axisOptions;\n\n                if (axisOptions.font) {\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n                    if (!axisOptions.font.color) {\n                        axisOptions.font.color = axisOptions.color;\n                    }\n                    if (!axisOptions.font.lineHeight) {\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n                    }\n                }\n            }\n\n            axisCount = options.yaxes.length || 1;\n            for (i = 0; i < axisCount; ++i) {\n\n                axisOptions = options.yaxes[i];\n                if (axisOptions && !axisOptions.tickColor) {\n                    axisOptions.tickColor = axisOptions.color;\n                }\n\n                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);\n                options.yaxes[i] = axisOptions;\n\n                if (axisOptions.font) {\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n                    if (!axisOptions.font.color) {\n                        axisOptions.font.color = axisOptions.color;\n                    }\n                    if (!axisOptions.font.lineHeight) {\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n                    }\n                }\n            }\n\n            // backwards compatibility, to be removed in future\n            if (options.xaxis.noTicks && options.xaxis.ticks == null)\n                options.xaxis.ticks = options.xaxis.noTicks;\n            if (options.yaxis.noTicks && options.yaxis.ticks == null)\n                options.yaxis.ticks = options.yaxis.noTicks;\n            if (options.x2axis) {\n                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);\n                options.xaxes[1].position = \"top\";\n                // Override the inherit to allow the axis to auto-scale\n                if (options.x2axis.min == null) {\n                    options.xaxes[1].min = null;\n                }\n                if (options.x2axis.max == null) {\n                    options.xaxes[1].max = null;\n                }\n            }\n            if (options.y2axis) {\n                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);\n                options.yaxes[1].position = \"right\";\n                // Override the inherit to allow the axis to auto-scale\n                if (options.y2axis.min == null) {\n                    options.yaxes[1].min = null;\n                }\n                if (options.y2axis.max == null) {\n                    options.yaxes[1].max = null;\n                }\n            }\n            if (options.grid.coloredAreas)\n                options.grid.markings = options.grid.coloredAreas;\n            if (options.grid.coloredAreasColor)\n                options.grid.markingsColor = options.grid.coloredAreasColor;\n            if (options.lines)\n                $.extend(true, options.series.lines, options.lines);\n            if (options.points)\n                $.extend(true, options.series.points, options.points);\n            if (options.bars)\n                $.extend(true, options.series.bars, options.bars);\n            if (options.shadowSize != null)\n                options.series.shadowSize = options.shadowSize;\n            if (options.highlightColor != null)\n                options.series.highlightColor = options.highlightColor;\n\n            // save options on axes for future reference\n            for (i = 0; i < options.xaxes.length; ++i)\n                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];\n            for (i = 0; i < options.yaxes.length; ++i)\n                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];\n\n            // add hooks from options\n            for (var n in hooks)\n                if (options.hooks[n] && options.hooks[n].length)\n                    hooks[n] = hooks[n].concat(options.hooks[n]);\n\n            executeHooks(hooks.processOptions, [options]);\n        }\n\n        function setData(d) {\n            series = parseData(d);\n            fillInSeriesOptions();\n            processData();\n        }\n\n        function parseData(d) {\n            var res = [];\n            for (var i = 0; i < d.length; ++i) {\n                var s = $.extend(true, {}, options.series);\n\n                if (d[i].data != null) {\n                    s.data = d[i].data; // move the data instead of deep-copy\n                    delete d[i].data;\n\n                    $.extend(true, s, d[i]);\n\n                    d[i].data = s.data;\n                }\n                else\n                    s.data = d[i];\n                res.push(s);\n            }\n\n            return res;\n        }\n\n        function axisNumber(obj, coord) {\n            var a = obj[coord + \"axis\"];\n            if (typeof a == \"object\") // if we got a real axis, extract number\n                a = a.n;\n            if (typeof a != \"number\")\n                a = 1; // default to first axis\n            return a;\n        }\n\n        function allAxes() {\n            // return flat array without annoying null entries\n            return $.grep(xaxes.concat(yaxes), function (a) { return a; });\n        }\n\n        function canvasToAxisCoords(pos) {\n            // return an object with x/y corresponding to all used axes\n            var res = {}, i, axis;\n            for (i = 0; i < xaxes.length; ++i) {\n                axis = xaxes[i];\n                if (axis && axis.used)\n                    res[\"x\" + axis.n] = axis.c2p(pos.left);\n            }\n\n            for (i = 0; i < yaxes.length; ++i) {\n                axis = yaxes[i];\n                if (axis && axis.used)\n                    res[\"y\" + axis.n] = axis.c2p(pos.top);\n            }\n\n            if (res.x1 !== undefined)\n                res.x = res.x1;\n            if (res.y1 !== undefined)\n                res.y = res.y1;\n\n            return res;\n        }\n\n        function axisToCanvasCoords(pos) {\n            // get canvas coords from the first pair of x/y found in pos\n            var res = {}, i, axis, key;\n\n            for (i = 0; i < xaxes.length; ++i) {\n                axis = xaxes[i];\n                if (axis && axis.used) {\n                    key = \"x\" + axis.n;\n                    if (pos[key] == null && axis.n == 1)\n                        key = \"x\";\n\n                    if (pos[key] != null) {\n                        res.left = axis.p2c(pos[key]);\n                        break;\n                    }\n                }\n            }\n\n            for (i = 0; i < yaxes.length; ++i) {\n                axis = yaxes[i];\n                if (axis && axis.used) {\n                    key = \"y\" + axis.n;\n                    if (pos[key] == null && axis.n == 1)\n                        key = \"y\";\n\n                    if (pos[key] != null) {\n                        res.top = axis.p2c(pos[key]);\n                        break;\n                    }\n                }\n            }\n\n            return res;\n        }\n\n        function getOrCreateAxis(axes, number) {\n            if (!axes[number - 1])\n                axes[number - 1] = {\n                    n: number, // save the number for future reference\n                    direction: axes == xaxes ? \"x\" : \"y\",\n                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)\n                };\n\n            return axes[number - 1];\n        }\n\n        function fillInSeriesOptions() {\n\n            var neededColors = series.length, maxIndex = -1, i;\n\n            // Subtract the number of series that already have fixed colors or\n            // color indexes from the number that we still need to generate.\n\n            for (i = 0; i < series.length; ++i) {\n                var sc = series[i].color;\n                if (sc != null) {\n                    neededColors--;\n                    if (typeof sc == \"number\" && sc > maxIndex) {\n                        maxIndex = sc;\n                    }\n                }\n            }\n\n            // If any of the series have fixed color indexes, then we need to\n            // generate at least as many colors as the highest index.\n\n            if (neededColors <= maxIndex) {\n                neededColors = maxIndex + 1;\n            }\n\n            // Generate all the colors, using first the option colors and then\n            // variations on those colors once they're exhausted.\n\n            var c, colors = [], colorPool = options.colors,\n                colorPoolSize = colorPool.length, variation = 0;\n\n            for (i = 0; i < neededColors; i++) {\n\n                c = $.color.parse(colorPool[i % colorPoolSize] || \"#666\");\n\n                // Each time we exhaust the colors in the pool we adjust\n                // a scaling factor used to produce more variations on\n                // those colors. The factor alternates negative/positive\n                // to produce lighter/darker colors.\n\n                // Reset the variation after every few cycles, or else\n                // it will end up producing only white or black colors.\n\n                if (i % colorPoolSize == 0 && i) {\n                    if (variation >= 0) {\n                        if (variation < 0.5) {\n                            variation = -variation - 0.2;\n                        } else variation = 0;\n                    } else variation = -variation;\n                }\n\n                colors[i] = c.scale('rgb', 1 + variation);\n            }\n\n            // Finalize the series options, filling in their colors\n\n            var colori = 0, s;\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                // assign colors\n                if (s.color == null) {\n                    s.color = colors[colori].toString();\n                    ++colori;\n                }\n                else if (typeof s.color == \"number\")\n                    s.color = colors[s.color].toString();\n\n                // turn on lines automatically in case nothing is set\n                if (s.lines.show == null) {\n                    var v, show = true;\n                    for (v in s)\n                        if (s[v] && s[v].show) {\n                            show = false;\n                            break;\n                        }\n                    if (show)\n                        s.lines.show = true;\n                }\n\n                // If nothing was provided for lines.zero, default it to match\n                // lines.fill, since areas by default should extend to zero.\n\n                if (s.lines.zero == null) {\n                    s.lines.zero = !!s.lines.fill;\n                }\n\n                // setup axes\n                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, \"x\"));\n                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, \"y\"));\n            }\n        }\n\n        function processData() {\n            var topSentry = Number.POSITIVE_INFINITY,\n                bottomSentry = Number.NEGATIVE_INFINITY,\n                fakeInfinity = Number.MAX_VALUE,\n                i, j, k, m, length,\n                s, points, ps, x, y, axis, val, f, p,\n                data, format;\n\n            function updateAxis(axis, min, max) {\n                if (min < axis.datamin && min != -fakeInfinity)\n                    axis.datamin = min;\n                if (max > axis.datamax && max != fakeInfinity)\n                    axis.datamax = max;\n            }\n\n            $.each(allAxes(), function (_, axis) {\n                // init axis\n                axis.datamin = topSentry;\n                axis.datamax = bottomSentry;\n                axis.used = false;\n            });\n\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n                s.datapoints = { points: [] };\n\n                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);\n            }\n\n            // first pass: clean and copy data\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                data = s.data;\n                format = s.datapoints.format;\n\n                if (!format) {\n                    format = [];\n                    // find out how to copy\n                    format.push({ x: true, number: true, required: true });\n                    format.push({ y: true, number: true, required: true });\n\n                    if (s.bars.show || (s.lines.show && s.lines.fill)) {\n                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));\n                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });\n                        if (s.bars.horizontal) {\n                            delete format[format.length - 1].y;\n                            format[format.length - 1].x = true;\n                        }\n                    }\n\n                    s.datapoints.format = format;\n                }\n\n                if (s.datapoints.pointsize != null)\n                    continue; // already filled in\n\n                s.datapoints.pointsize = format.length;\n\n                ps = s.datapoints.pointsize;\n                points = s.datapoints.points;\n\n                var insertSteps = s.lines.show && s.lines.steps;\n                s.xaxis.used = s.yaxis.used = true;\n\n                for (j = k = 0; j < data.length; ++j, k += ps) {\n                    p = data[j];\n\n                    var nullify = p == null;\n                    if (!nullify) {\n                        for (m = 0; m < ps; ++m) {\n                            val = p[m];\n                            f = format[m];\n\n                            if (f) {\n                                if (f.number && val != null) {\n                                    val = +val; // convert to number\n                                    if (isNaN(val))\n                                        val = null;\n                                    else if (val == Infinity)\n                                        val = fakeInfinity;\n                                    else if (val == -Infinity)\n                                        val = -fakeInfinity;\n                                }\n\n                                if (val == null) {\n                                    if (f.required)\n                                        nullify = true;\n\n                                    if (f.defaultValue != null)\n                                        val = f.defaultValue;\n                                }\n                            }\n\n                            points[k + m] = val;\n                        }\n                    }\n\n                    if (nullify) {\n                        for (m = 0; m < ps; ++m) {\n                            val = points[k + m];\n                            if (val != null) {\n                                f = format[m];\n                                // extract min/max info\n                                if (f.autoscale !== false) {\n                                    if (f.x) {\n                                        updateAxis(s.xaxis, val, val);\n                                    }\n                                    if (f.y) {\n                                        updateAxis(s.yaxis, val, val);\n                                    }\n                                }\n                            }\n                            points[k + m] = null;\n                        }\n                    }\n                    else {\n                        // a little bit of line specific stuff that\n                        // perhaps shouldn't be here, but lacking\n                        // better means...\n                        if (insertSteps && k > 0\n                            && points[k - ps] != null\n                            && points[k - ps] != points[k]\n                            && points[k - ps + 1] != points[k + 1]) {\n                            // copy the point to make room for a middle point\n                            for (m = 0; m < ps; ++m)\n                                points[k + ps + m] = points[k + m];\n\n                            // middle point has same y\n                            points[k + 1] = points[k - ps + 1];\n\n                            // we've added a point, better reflect that\n                            k += ps;\n                        }\n                    }\n                }\n            }\n\n            // give the hooks a chance to run\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);\n            }\n\n            // second pass: find datamax/datamin for auto-scaling\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n                points = s.datapoints.points;\n                ps = s.datapoints.pointsize;\n                format = s.datapoints.format;\n\n                var xmin = topSentry, ymin = topSentry,\n                    xmax = bottomSentry, ymax = bottomSentry;\n\n                for (j = 0; j < points.length; j += ps) {\n                    if (points[j] == null)\n                        continue;\n\n                    for (m = 0; m < ps; ++m) {\n                        val = points[j + m];\n                        f = format[m];\n                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)\n                            continue;\n\n                        if (f.x) {\n                            if (val < xmin)\n                                xmin = val;\n                            if (val > xmax)\n                                xmax = val;\n                        }\n                        if (f.y) {\n                            if (val < ymin)\n                                ymin = val;\n                            if (val > ymax)\n                                ymax = val;\n                        }\n                    }\n                }\n\n                if (s.bars.show) {\n                    // make sure we got room for the bar on the dancing floor\n                    var delta;\n\n                    switch (s.bars.align) {\n                        case \"left\":\n                            delta = 0;\n                            break;\n                        case \"right\":\n                            delta = -s.bars.barWidth;\n                            break;\n                        default:\n                            delta = -s.bars.barWidth / 2;\n                    }\n\n                    if (s.bars.horizontal) {\n                        ymin += delta;\n                        ymax += delta + s.bars.barWidth;\n                    }\n                    else {\n                        xmin += delta;\n                        xmax += delta + s.bars.barWidth;\n                    }\n                }\n\n                updateAxis(s.xaxis, xmin, xmax);\n                updateAxis(s.yaxis, ymin, ymax);\n            }\n\n            $.each(allAxes(), function (_, axis) {\n                if (axis.datamin == topSentry)\n                    axis.datamin = null;\n                if (axis.datamax == bottomSentry)\n                    axis.datamax = null;\n            });\n        }\n\n        function setupCanvases() {\n\n            // Make sure the placeholder is clear of everything except canvases\n            // from a previous plot in this container that we'll try to re-use.\n\n            placeholder.css(\"padding\", 0) // padding messes up the positioning\n                .children().filter(function(){\n                    return !$(this).hasClass(\"flot-overlay\") && !$(this).hasClass('flot-base');\n                }).remove();\n\n            if (placeholder.css(\"position\") == 'static')\n                placeholder.css(\"position\", \"relative\"); // for positioning labels and overlay\n\n            surface = new Canvas(\"flot-base\", placeholder);\n            overlay = new Canvas(\"flot-overlay\", placeholder); // overlay canvas for interactive features\n\n            ctx = surface.context;\n            octx = overlay.context;\n\n            // define which element we're listening for events on\n            eventHolder = $(overlay.element).unbind();\n\n            // If we're re-using a plot object, shut down the old one\n\n            var existing = placeholder.data(\"plot\");\n\n            if (existing) {\n                existing.shutdown();\n                overlay.clear();\n            }\n\n            // save in case we get replotted\n            placeholder.data(\"plot\", plot);\n        }\n\n        function bindEvents() {\n            // bind events\n            if (options.grid.hoverable) {\n                eventHolder.mousemove(onMouseMove);\n\n                // Use bind, rather than .mouseleave, because we officially\n                // still support jQuery 1.2.6, which doesn't define a shortcut\n                // for mouseenter or mouseleave.  This was a bug/oversight that\n                // was fixed somewhere around 1.3.x.  We can return to using\n                // .mouseleave when we drop support for 1.2.6.\n\n                eventHolder.bind(\"mouseleave\", onMouseLeave);\n            }\n\n            if (options.grid.clickable)\n                eventHolder.click(onClick);\n\n            executeHooks(hooks.bindEvents, [eventHolder]);\n        }\n\n        function shutdown() {\n            if (redrawTimeout)\n                clearTimeout(redrawTimeout);\n\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mouseleave\", onMouseLeave);\n            eventHolder.unbind(\"click\", onClick);\n\n            executeHooks(hooks.shutdown, [eventHolder]);\n        }\n\n        function setTransformationHelpers(axis) {\n            // set helper functions on the axis, assumes plot area\n            // has been computed already\n\n            function identity(x) { return x; }\n\n            var s, m, t = axis.options.transform || identity,\n                it = axis.options.inverseTransform;\n\n            // precompute how much the axis is scaling a point\n            // in canvas space\n            if (axis.direction == \"x\") {\n                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));\n                m = Math.min(t(axis.max), t(axis.min));\n            }\n            else {\n                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));\n                s = -s;\n                m = Math.max(t(axis.max), t(axis.min));\n            }\n\n            // data point to canvas coordinate\n            if (t == identity) // slight optimization\n                axis.p2c = function (p) { return (p - m) * s; };\n            else\n                axis.p2c = function (p) { return (t(p) - m) * s; };\n            // canvas coordinate to data point\n            if (!it)\n                axis.c2p = function (c) { return m + c / s; };\n            else\n                axis.c2p = function (c) { return it(m + c / s); };\n        }\n\n        function measureTickLabels(axis) {\n\n            var opts = axis.options,\n                ticks = axis.ticks || [],\n                labelWidth = opts.labelWidth || 0,\n                labelHeight = opts.labelHeight || 0,\n                maxWidth = labelWidth || (axis.direction == \"x\" ? Math.floor(surface.width / (ticks.length || 1)) : null),\n                legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n                layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n                font = opts.font || \"flot-tick-label tickLabel\";\n\n            for (var i = 0; i < ticks.length; ++i) {\n\n                var t = ticks[i];\n\n                if (!t.label)\n                    continue;\n\n                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);\n\n                labelWidth = Math.max(labelWidth, info.width);\n                labelHeight = Math.max(labelHeight, info.height);\n            }\n\n            axis.labelWidth = opts.labelWidth || labelWidth;\n            axis.labelHeight = opts.labelHeight || labelHeight;\n        }\n\n        function allocateAxisBoxFirstPhase(axis) {\n            // find the bounding box of the axis by looking at label\n            // widths/heights and ticks, make room by diminishing the\n            // plotOffset; this first phase only looks at one\n            // dimension per axis, the other dimension depends on the\n            // other axes so will have to wait\n\n            var lw = axis.labelWidth,\n                lh = axis.labelHeight,\n                pos = axis.options.position,\n                isXAxis = axis.direction === \"x\",\n                tickLength = axis.options.tickLength,\n                axisMargin = options.grid.axisMargin,\n                padding = options.grid.labelMargin,\n                innermost = true,\n                outermost = true,\n                first = true,\n                found = false;\n\n            // Determine the axis's position in its direction and on its side\n\n            $.each(isXAxis ? xaxes : yaxes, function(i, a) {\n                if (a && (a.show || a.reserveSpace)) {\n                    if (a === axis) {\n                        found = true;\n                    } else if (a.options.position === pos) {\n                        if (found) {\n                            outermost = false;\n                        } else {\n                            innermost = false;\n                        }\n                    }\n                    if (!found) {\n                        first = false;\n                    }\n                }\n            });\n\n            // The outermost axis on each side has no margin\n\n            if (outermost) {\n                axisMargin = 0;\n            }\n\n            // The ticks for the first axis in each direction stretch across\n\n            if (tickLength == null) {\n                tickLength = first ? \"full\" : 5;\n            }\n\n            if (!isNaN(+tickLength))\n                padding += +tickLength;\n\n            if (isXAxis) {\n                lh += padding;\n\n                if (pos == \"bottom\") {\n                    plotOffset.bottom += lh + axisMargin;\n                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };\n                }\n                else {\n                    axis.box = { top: plotOffset.top + axisMargin, height: lh };\n                    plotOffset.top += lh + axisMargin;\n                }\n            }\n            else {\n                lw += padding;\n\n                if (pos == \"left\") {\n                    axis.box = { left: plotOffset.left + axisMargin, width: lw };\n                    plotOffset.left += lw + axisMargin;\n                }\n                else {\n                    plotOffset.right += lw + axisMargin;\n                    axis.box = { left: surface.width - plotOffset.right, width: lw };\n                }\n            }\n\n             // save for future reference\n            axis.position = pos;\n            axis.tickLength = tickLength;\n            axis.box.padding = padding;\n            axis.innermost = innermost;\n        }\n\n        function allocateAxisBoxSecondPhase(axis) {\n            // now that all axis boxes have been placed in one\n            // dimension, we can set the remaining dimension coordinates\n            if (axis.direction == \"x\") {\n                axis.box.left = plotOffset.left - axis.labelWidth / 2;\n                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;\n            }\n            else {\n                axis.box.top = plotOffset.top - axis.labelHeight / 2;\n                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;\n            }\n        }\n\n        function adjustLayoutForThingsStickingOut() {\n            // possibly adjust plot offset to ensure everything stays\n            // inside the canvas and isn't clipped off\n\n            var minMargin = options.grid.minBorderMargin,\n                axis, i;\n\n            // check stuff from the plot (FIXME: this should just read\n            // a value from the series, otherwise it's impossible to\n            // customize)\n            if (minMargin == null) {\n                minMargin = 0;\n                for (i = 0; i < series.length; ++i)\n                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));\n            }\n\n            var margins = {\n                left: minMargin,\n                right: minMargin,\n                top: minMargin,\n                bottom: minMargin\n            };\n\n            // check axis labels, note we don't check the actual\n            // labels but instead use the overall width/height to not\n            // jump as much around with replots\n            $.each(allAxes(), function (_, axis) {\n                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {\n                    if (axis.direction === \"x\") {\n                        margins.left = Math.max(margins.left, axis.labelWidth / 2);\n                        margins.right = Math.max(margins.right, axis.labelWidth / 2);\n                    } else {\n                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);\n                        margins.top = Math.max(margins.top, axis.labelHeight / 2);\n                    }\n                }\n            });\n\n            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));\n            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));\n            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));\n            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));\n        }\n\n        function setupGrid() {\n            var i, axes = allAxes(), showGrid = options.grid.show;\n\n            // Initialize the plot's offset from the edge of the canvas\n\n            for (var a in plotOffset) {\n                var margin = options.grid.margin || 0;\n                plotOffset[a] = typeof margin == \"number\" ? margin : margin[a] || 0;\n            }\n\n            executeHooks(hooks.processOffset, [plotOffset]);\n\n            // If the grid is visible, add its border width to the offset\n\n            for (var a in plotOffset) {\n                if(typeof(options.grid.borderWidth) == \"object\") {\n                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;\n                }\n                else {\n                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;\n                }\n            }\n\n            $.each(axes, function (_, axis) {\n                var axisOpts = axis.options;\n                axis.show = axisOpts.show == null ? axis.used : axisOpts.show;\n                axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;\n                setRange(axis);\n            });\n\n            if (showGrid) {\n\n                var allocatedAxes = $.grep(axes, function (axis) {\n                    return axis.show || axis.reserveSpace;\n                });\n\n                $.each(allocatedAxes, function (_, axis) {\n                    // make the ticks\n                    setupTickGeneration(axis);\n                    setTicks(axis);\n                    snapRangeToTicks(axis, axis.ticks);\n                    // find labelWidth/Height for axis\n                    measureTickLabels(axis);\n                });\n\n                // with all dimensions calculated, we can compute the\n                // axis bounding boxes, start from the outside\n                // (reverse order)\n                for (i = allocatedAxes.length - 1; i >= 0; --i)\n                    allocateAxisBoxFirstPhase(allocatedAxes[i]);\n\n                // make sure we've got enough space for things that\n                // might stick out\n                adjustLayoutForThingsStickingOut();\n\n                $.each(allocatedAxes, function (_, axis) {\n                    allocateAxisBoxSecondPhase(axis);\n                });\n            }\n\n            plotWidth = surface.width - plotOffset.left - plotOffset.right;\n            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;\n\n            // now we got the proper plot dimensions, we can compute the scaling\n            $.each(axes, function (_, axis) {\n                setTransformationHelpers(axis);\n            });\n\n            if (showGrid) {\n                drawAxisLabels();\n            }\n\n            insertLegend();\n        }\n\n        function setRange(axis) {\n            var opts = axis.options,\n                min = +(opts.min != null ? opts.min : axis.datamin),\n                max = +(opts.max != null ? opts.max : axis.datamax),\n                delta = max - min;\n\n            if (delta == 0.0) {\n                // degenerate case\n                var widen = max == 0 ? 1 : 0.01;\n\n                if (opts.min == null)\n                    min -= widen;\n                // always widen max if we couldn't widen min to ensure we\n                // don't fall into min == max which doesn't work\n                if (opts.max == null || opts.min != null)\n                    max += widen;\n            }\n            else {\n                // consider autoscaling\n                var margin = opts.autoscaleMargin;\n                if (margin != null) {\n                    if (opts.min == null) {\n                        min -= delta * margin;\n                        // make sure we don't go below zero if all values\n                        // are positive\n                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)\n                            min = 0;\n                    }\n                    if (opts.max == null) {\n                        max += delta * margin;\n                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)\n                            max = 0;\n                    }\n                }\n            }\n            axis.min = min;\n            axis.max = max;\n        }\n\n        function setupTickGeneration(axis) {\n            var opts = axis.options;\n\n            // estimate number of ticks\n            var noTicks;\n            if (typeof opts.ticks == \"number\" && opts.ticks > 0)\n                noTicks = opts.ticks;\n            else\n                // heuristic based on the model a*sqrt(x) fitted to\n                // some data points that seemed reasonable\n                noTicks = 0.3 * Math.sqrt(axis.direction == \"x\" ? surface.width : surface.height);\n\n            var delta = (axis.max - axis.min) / noTicks,\n                dec = -Math.floor(Math.log(delta) / Math.LN10),\n                maxDec = opts.tickDecimals;\n\n            if (maxDec != null && dec > maxDec) {\n                dec = maxDec;\n            }\n\n            var magn = Math.pow(10, -dec),\n                norm = delta / magn, // norm is between 1.0 and 10.0\n                size;\n\n            if (norm < 1.5) {\n                size = 1;\n            } else if (norm < 3) {\n                size = 2;\n                // special case for 2.5, requires an extra decimal\n                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\n                    size = 2.5;\n                    ++dec;\n                }\n            } else if (norm < 7.5) {\n                size = 5;\n            } else {\n                size = 10;\n            }\n\n            size *= magn;\n\n            if (opts.minTickSize != null && size < opts.minTickSize) {\n                size = opts.minTickSize;\n            }\n\n            axis.delta = delta;\n            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);\n            axis.tickSize = opts.tickSize || size;\n\n            // Time mode was moved to a plug-in in 0.8, and since so many people use it\n            // we'll add an especially friendly reminder to make sure they included it.\n\n            if (opts.mode == \"time\" && !axis.tickGenerator) {\n                throw new Error(\"Time mode requires the flot.time plugin.\");\n            }\n\n            // Flot supports base-10 axes; any other mode else is handled by a plug-in,\n            // like flot.time.js.\n\n            if (!axis.tickGenerator) {\n\n                axis.tickGenerator = function (axis) {\n\n                    var ticks = [],\n                        start = floorInBase(axis.min, axis.tickSize),\n                        i = 0,\n                        v = Number.NaN,\n                        prev;\n\n                    do {\n                        prev = v;\n                        v = start + i * axis.tickSize;\n                        ticks.push(v);\n                        ++i;\n                    } while (v < axis.max && v != prev);\n                    return ticks;\n                };\n\n\t\t\t\taxis.tickFormatter = function (value, axis) {\n\n\t\t\t\t\tvar factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\n\t\t\t\t\tvar formatted = \"\" + Math.round(value * factor) / factor;\n\n\t\t\t\t\t// If tickDecimals was specified, ensure that we have exactly that\n\t\t\t\t\t// much precision; otherwise default to the value's own precision.\n\n\t\t\t\t\tif (axis.tickDecimals != null) {\n\t\t\t\t\t\tvar decimal = formatted.indexOf(\".\");\n\t\t\t\t\t\tvar precision = decimal == -1 ? 0 : formatted.length - decimal - 1;\n\t\t\t\t\t\tif (precision < axis.tickDecimals) {\n\t\t\t\t\t\t\treturn (precision ? formatted : formatted + \".\") + (\"\" + factor).substr(1, axis.tickDecimals - precision);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                    return formatted;\n                };\n            }\n\n            if ($.isFunction(opts.tickFormatter))\n                axis.tickFormatter = function (v, axis) { return \"\" + opts.tickFormatter(v, axis); };\n\n            if (opts.alignTicksWithAxis != null) {\n                var otherAxis = (axis.direction == \"x\" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];\n                if (otherAxis && otherAxis.used && otherAxis != axis) {\n                    // consider snapping min/max to outermost nice ticks\n                    var niceTicks = axis.tickGenerator(axis);\n                    if (niceTicks.length > 0) {\n                        if (opts.min == null)\n                            axis.min = Math.min(axis.min, niceTicks[0]);\n                        if (opts.max == null && niceTicks.length > 1)\n                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);\n                    }\n\n                    axis.tickGenerator = function (axis) {\n                        // copy ticks, scaled to this axis\n                        var ticks = [], v, i;\n                        for (i = 0; i < otherAxis.ticks.length; ++i) {\n                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);\n                            v = axis.min + v * (axis.max - axis.min);\n                            ticks.push(v);\n                        }\n                        return ticks;\n                    };\n\n                    // we might need an extra decimal since forced\n                    // ticks don't necessarily fit naturally\n                    if (!axis.mode && opts.tickDecimals == null) {\n                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),\n                            ts = axis.tickGenerator(axis);\n\n                        // only proceed if the tick interval rounded\n                        // with an extra decimal doesn't give us a\n                        // zero at end\n                        if (!(ts.length > 1 && /\\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))\n                            axis.tickDecimals = extraDec;\n                    }\n                }\n            }\n        }\n\n        function setTicks(axis) {\n            var oticks = axis.options.ticks, ticks = [];\n            if (oticks == null || (typeof oticks == \"number\" && oticks > 0))\n                ticks = axis.tickGenerator(axis);\n            else if (oticks) {\n                if ($.isFunction(oticks))\n                    // generate the ticks\n                    ticks = oticks(axis);\n                else\n                    ticks = oticks;\n            }\n\n            // clean up/labelify the supplied ticks, copy them over\n            var i, v;\n            axis.ticks = [];\n            for (i = 0; i < ticks.length; ++i) {\n                var label = null;\n                var t = ticks[i];\n                if (typeof t == \"object\") {\n                    v = +t[0];\n                    if (t.length > 1)\n                        label = t[1];\n                }\n                else\n                    v = +t;\n                if (label == null)\n                    label = axis.tickFormatter(v, axis);\n                if (!isNaN(v))\n                    axis.ticks.push({ v: v, label: label });\n            }\n        }\n\n        function snapRangeToTicks(axis, ticks) {\n            if (axis.options.autoscaleMargin && ticks.length > 0) {\n                // snap to ticks\n                if (axis.options.min == null)\n                    axis.min = Math.min(axis.min, ticks[0].v);\n                if (axis.options.max == null && ticks.length > 1)\n                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);\n            }\n        }\n\n        function draw() {\n\n            surface.clear();\n\n            executeHooks(hooks.drawBackground, [ctx]);\n\n            var grid = options.grid;\n\n            // draw background, if any\n            if (grid.show && grid.backgroundColor)\n                drawBackground();\n\n            if (grid.show && !grid.aboveData) {\n                drawGrid();\n            }\n\n            for (var i = 0; i < series.length; ++i) {\n                executeHooks(hooks.drawSeries, [ctx, series[i]]);\n                drawSeries(series[i]);\n            }\n\n            executeHooks(hooks.draw, [ctx]);\n\n            if (grid.show && grid.aboveData) {\n                drawGrid();\n            }\n\n            surface.render();\n\n            // A draw implies that either the axes or data have changed, so we\n            // should probably update the overlay highlights as well.\n\n            triggerRedrawOverlay();\n        }\n\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = allAxes();\n\n            for (var i = 0; i < axes.length; ++i) {\n                axis = axes[i];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? xaxes[0] : yaxes[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n\n            return { from: from, to: to, axis: axis };\n        }\n\n        function drawBackground() {\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, \"rgba(255, 255, 255, 0)\");\n            ctx.fillRect(0, 0, plotWidth, plotHeight);\n            ctx.restore();\n        }\n\n        function drawGrid() {\n            var i, axes, bw, bc;\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            // draw markings\n            var markings = options.grid.markings;\n            if (markings) {\n                if ($.isFunction(markings)) {\n                    axes = plot.getAxes();\n                    // xmin etc. is backwards compatibility, to be\n                    // removed in the future\n                    axes.xmin = axes.xaxis.min;\n                    axes.xmax = axes.xaxis.max;\n                    axes.ymin = axes.yaxis.min;\n                    axes.ymax = axes.yaxis.max;\n\n                    markings = markings(axes);\n                }\n\n                for (i = 0; i < markings.length; ++i) {\n                    var m = markings[i],\n                        xrange = extractRange(m, \"x\"),\n                        yrange = extractRange(m, \"y\");\n\n                    // fill in missing\n                    if (xrange.from == null)\n                        xrange.from = xrange.axis.min;\n                    if (xrange.to == null)\n                        xrange.to = xrange.axis.max;\n                    if (yrange.from == null)\n                        yrange.from = yrange.axis.min;\n                    if (yrange.to == null)\n                        yrange.to = yrange.axis.max;\n\n                    // clip\n                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||\n                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)\n                        continue;\n\n                    xrange.from = Math.max(xrange.from, xrange.axis.min);\n                    xrange.to = Math.min(xrange.to, xrange.axis.max);\n                    yrange.from = Math.max(yrange.from, yrange.axis.min);\n                    yrange.to = Math.min(yrange.to, yrange.axis.max);\n\n                    var xequal = xrange.from === xrange.to,\n                        yequal = yrange.from === yrange.to;\n\n                    if (xequal && yequal) {\n                        continue;\n                    }\n\n                    // then draw\n                    xrange.from = Math.floor(xrange.axis.p2c(xrange.from));\n                    xrange.to = Math.floor(xrange.axis.p2c(xrange.to));\n                    yrange.from = Math.floor(yrange.axis.p2c(yrange.from));\n                    yrange.to = Math.floor(yrange.axis.p2c(yrange.to));\n\n                    if (xequal || yequal) {\n                        var lineWidth = m.lineWidth || options.grid.markingsLineWidth,\n                            subPixel = lineWidth % 2 ? 0.5 : 0;\n                        ctx.beginPath();\n                        ctx.strokeStyle = m.color || options.grid.markingsColor;\n                        ctx.lineWidth = lineWidth;\n                        if (xequal) {\n                            ctx.moveTo(xrange.to + subPixel, yrange.from);\n                            ctx.lineTo(xrange.to + subPixel, yrange.to);\n                        } else {\n                            ctx.moveTo(xrange.from, yrange.to + subPixel);\n                            ctx.lineTo(xrange.to, yrange.to + subPixel);                            \n                        }\n                        ctx.stroke();\n                    } else {\n                        ctx.fillStyle = m.color || options.grid.markingsColor;\n                        ctx.fillRect(xrange.from, yrange.to,\n                                     xrange.to - xrange.from,\n                                     yrange.from - yrange.to);\n                    }\n                }\n            }\n\n            // draw the ticks\n            axes = allAxes();\n            bw = options.grid.borderWidth;\n\n            for (var j = 0; j < axes.length; ++j) {\n                var axis = axes[j], box = axis.box,\n                    t = axis.tickLength, x, y, xoff, yoff;\n                if (!axis.show || axis.ticks.length == 0)\n                    continue;\n\n                ctx.lineWidth = 1;\n\n                // find the edges\n                if (axis.direction == \"x\") {\n                    x = 0;\n                    if (t == \"full\")\n                        y = (axis.position == \"top\" ? 0 : plotHeight);\n                    else\n                        y = box.top - plotOffset.top + (axis.position == \"top\" ? box.height : 0);\n                }\n                else {\n                    y = 0;\n                    if (t == \"full\")\n                        x = (axis.position == \"left\" ? 0 : plotWidth);\n                    else\n                        x = box.left - plotOffset.left + (axis.position == \"left\" ? box.width : 0);\n                }\n\n                // draw tick bar\n                if (!axis.innermost) {\n                    ctx.strokeStyle = axis.options.color;\n                    ctx.beginPath();\n                    xoff = yoff = 0;\n                    if (axis.direction == \"x\")\n                        xoff = plotWidth + 1;\n                    else\n                        yoff = plotHeight + 1;\n\n                    if (ctx.lineWidth == 1) {\n                        if (axis.direction == \"x\") {\n                            y = Math.floor(y) + 0.5;\n                        } else {\n                            x = Math.floor(x) + 0.5;\n                        }\n                    }\n\n                    ctx.moveTo(x, y);\n                    ctx.lineTo(x + xoff, y + yoff);\n                    ctx.stroke();\n                }\n\n                // draw ticks\n\n                ctx.strokeStyle = axis.options.tickColor;\n\n                ctx.beginPath();\n                for (i = 0; i < axis.ticks.length; ++i) {\n                    var v = axis.ticks[i].v;\n\n                    xoff = yoff = 0;\n\n                    if (isNaN(v) || v < axis.min || v > axis.max\n                        // skip those lying on the axes if we got a border\n                        || (t == \"full\"\n                            && ((typeof bw == \"object\" && bw[axis.position] > 0) || bw > 0)\n                            && (v == axis.min || v == axis.max)))\n                        continue;\n\n                    if (axis.direction == \"x\") {\n                        x = axis.p2c(v);\n                        yoff = t == \"full\" ? -plotHeight : t;\n\n                        if (axis.position == \"top\")\n                            yoff = -yoff;\n                    }\n                    else {\n                        y = axis.p2c(v);\n                        xoff = t == \"full\" ? -plotWidth : t;\n\n                        if (axis.position == \"left\")\n                            xoff = -xoff;\n                    }\n\n                    if (ctx.lineWidth == 1) {\n                        if (axis.direction == \"x\")\n                            x = Math.floor(x) + 0.5;\n                        else\n                            y = Math.floor(y) + 0.5;\n                    }\n\n                    ctx.moveTo(x, y);\n                    ctx.lineTo(x + xoff, y + yoff);\n                }\n\n                ctx.stroke();\n            }\n\n\n            // draw border\n            if (bw) {\n                // If either borderWidth or borderColor is an object, then draw the border\n                // line by line instead of as one rectangle\n                bc = options.grid.borderColor;\n                if(typeof bw == \"object\" || typeof bc == \"object\") {\n                    if (typeof bw !== \"object\") {\n                        bw = {top: bw, right: bw, bottom: bw, left: bw};\n                    }\n                    if (typeof bc !== \"object\") {\n                        bc = {top: bc, right: bc, bottom: bc, left: bc};\n                    }\n\n                    if (bw.top > 0) {\n                        ctx.strokeStyle = bc.top;\n                        ctx.lineWidth = bw.top;\n                        ctx.beginPath();\n                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);\n                        ctx.lineTo(plotWidth, 0 - bw.top/2);\n                        ctx.stroke();\n                    }\n\n                    if (bw.right > 0) {\n                        ctx.strokeStyle = bc.right;\n                        ctx.lineWidth = bw.right;\n                        ctx.beginPath();\n                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);\n                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);\n                        ctx.stroke();\n                    }\n\n                    if (bw.bottom > 0) {\n                        ctx.strokeStyle = bc.bottom;\n                        ctx.lineWidth = bw.bottom;\n                        ctx.beginPath();\n                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);\n                        ctx.lineTo(0, plotHeight + bw.bottom / 2);\n                        ctx.stroke();\n                    }\n\n                    if (bw.left > 0) {\n                        ctx.strokeStyle = bc.left;\n                        ctx.lineWidth = bw.left;\n                        ctx.beginPath();\n                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);\n                        ctx.lineTo(0- bw.left/2, 0);\n                        ctx.stroke();\n                    }\n                }\n                else {\n                    ctx.lineWidth = bw;\n                    ctx.strokeStyle = options.grid.borderColor;\n                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);\n                }\n            }\n\n            ctx.restore();\n        }\n\n        function drawAxisLabels() {\n\n            $.each(allAxes(), function (_, axis) {\n                var box = axis.box,\n                    legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n                    layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n                    font = axis.options.font || \"flot-tick-label tickLabel\",\n                    tick, x, y, halign, valign;\n\n                // Remove text before checking for axis.show and ticks.length;\n                // otherwise plugins, like flot-tickrotor, that draw their own\n                // tick labels will end up with both theirs and the defaults.\n\n                surface.removeText(layer);\n\n                if (!axis.show || axis.ticks.length == 0)\n                    return;\n\n                for (var i = 0; i < axis.ticks.length; ++i) {\n\n                    tick = axis.ticks[i];\n                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)\n                        continue;\n\n                    if (axis.direction == \"x\") {\n                        halign = \"center\";\n                        x = plotOffset.left + axis.p2c(tick.v);\n                        if (axis.position == \"bottom\") {\n                            y = box.top + box.padding;\n                        } else {\n                            y = box.top + box.height - box.padding;\n                            valign = \"bottom\";\n                        }\n                    } else {\n                        valign = \"middle\";\n                        y = plotOffset.top + axis.p2c(tick.v);\n                        if (axis.position == \"left\") {\n                            x = box.left + box.width - box.padding;\n                            halign = \"right\";\n                        } else {\n                            x = box.left + box.padding;\n                        }\n                    }\n\n                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);\n                }\n            });\n        }\n\n        function drawSeries(series) {\n            if (series.lines.show)\n                drawSeriesLines(series);\n            if (series.bars.show)\n                drawSeriesBars(series);\n            if (series.points.show)\n                drawSeriesPoints(series);\n        }\n\n        function drawSeriesLines(series) {\n            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {\n                var points = datapoints.points,\n                    ps = datapoints.pointsize,\n                    prevx = null, prevy = null;\n\n                ctx.beginPath();\n                for (var i = ps; i < points.length; i += ps) {\n                    var x1 = points[i - ps], y1 = points[i - ps + 1],\n                        x2 = points[i], y2 = points[i + 1];\n\n                    if (x1 == null || x2 == null)\n                        continue;\n\n                    // clip with ymin\n                    if (y1 <= y2 && y1 < axisy.min) {\n                        if (y2 < axisy.min)\n                            continue;   // line segment is outside\n                        // compute new intersection point\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.min;\n                    }\n                    else if (y2 <= y1 && y2 < axisy.min) {\n                        if (y1 < axisy.min)\n                            continue;\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.min;\n                    }\n\n                    // clip with ymax\n                    if (y1 >= y2 && y1 > axisy.max) {\n                        if (y2 > axisy.max)\n                            continue;\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.max;\n                    }\n                    else if (y2 >= y1 && y2 > axisy.max) {\n                        if (y1 > axisy.max)\n                            continue;\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.max;\n                    }\n\n                    // clip with xmin\n                    if (x1 <= x2 && x1 < axisx.min) {\n                        if (x2 < axisx.min)\n                            continue;\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.min;\n                    }\n                    else if (x2 <= x1 && x2 < axisx.min) {\n                        if (x1 < axisx.min)\n                            continue;\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.min;\n                    }\n\n                    // clip with xmax\n                    if (x1 >= x2 && x1 > axisx.max) {\n                        if (x2 > axisx.max)\n                            continue;\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.max;\n                    }\n                    else if (x2 >= x1 && x2 > axisx.max) {\n                        if (x1 > axisx.max)\n                            continue;\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.max;\n                    }\n\n                    if (x1 != prevx || y1 != prevy)\n                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n\n                    prevx = x2;\n                    prevy = y2;\n                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);\n                }\n                ctx.stroke();\n            }\n\n            function plotLineArea(datapoints, axisx, axisy) {\n                var points = datapoints.points,\n                    ps = datapoints.pointsize,\n                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),\n                    i = 0, top, areaOpen = false,\n                    ypos = 1, segmentStart = 0, segmentEnd = 0;\n\n                // we process each segment in two turns, first forward\n                // direction to sketch out top, then once we hit the\n                // end we go backwards to sketch the bottom\n                while (true) {\n                    if (ps > 0 && i > points.length + ps)\n                        break;\n\n                    i += ps; // ps is negative if going backwards\n\n                    var x1 = points[i - ps],\n                        y1 = points[i - ps + ypos],\n                        x2 = points[i], y2 = points[i + ypos];\n\n                    if (areaOpen) {\n                        if (ps > 0 && x1 != null && x2 == null) {\n                            // at turning point\n                            segmentEnd = i;\n                            ps = -ps;\n                            ypos = 2;\n                            continue;\n                        }\n\n                        if (ps < 0 && i == segmentStart + ps) {\n                            // done with the reverse sweep\n                            ctx.fill();\n                            areaOpen = false;\n                            ps = -ps;\n                            ypos = 1;\n                            i = segmentStart = segmentEnd + ps;\n                            continue;\n                        }\n                    }\n\n                    if (x1 == null || x2 == null)\n                        continue;\n\n                    // clip x values\n\n                    // clip with xmin\n                    if (x1 <= x2 && x1 < axisx.min) {\n                        if (x2 < axisx.min)\n                            continue;\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.min;\n                    }\n                    else if (x2 <= x1 && x2 < axisx.min) {\n                        if (x1 < axisx.min)\n                            continue;\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.min;\n                    }\n\n                    // clip with xmax\n                    if (x1 >= x2 && x1 > axisx.max) {\n                        if (x2 > axisx.max)\n                            continue;\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.max;\n                    }\n                    else if (x2 >= x1 && x2 > axisx.max) {\n                        if (x1 > axisx.max)\n                            continue;\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.max;\n                    }\n\n                    if (!areaOpen) {\n                        // open area\n                        ctx.beginPath();\n                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));\n                        areaOpen = true;\n                    }\n\n                    // now first check the case where both is outside\n                    if (y1 >= axisy.max && y2 >= axisy.max) {\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));\n                        continue;\n                    }\n                    else if (y1 <= axisy.min && y2 <= axisy.min) {\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));\n                        continue;\n                    }\n\n                    // else it's a bit more complicated, there might\n                    // be a flat maxed out rectangle first, then a\n                    // triangular cutout or reverse; to find these\n                    // keep track of the current x values\n                    var x1old = x1, x2old = x2;\n\n                    // clip the y values, without shortcutting, we\n                    // go through all cases in turn\n\n                    // clip with ymin\n                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.min;\n                    }\n                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.min;\n                    }\n\n                    // clip with ymax\n                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.max;\n                    }\n                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.max;\n                    }\n\n                    // if the x value was changed we got a rectangle\n                    // to fill\n                    if (x1 != x1old) {\n                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));\n                        // it goes to (x1, y1), but we fill that below\n                    }\n\n                    // fill triangular section, this sometimes result\n                    // in redundant points if (x1, y1) hasn't changed\n                    // from previous line to, but we just ignore that\n                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));\n                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n\n                    // fill the other rectangle if it's there\n                    if (x2 != x2old) {\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));\n                    }\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n            ctx.lineJoin = \"round\";\n\n            var lw = series.lines.lineWidth,\n                sw = series.shadowSize;\n            // FIXME: consider another form of shadow when filling is turned on\n            if (lw > 0 && sw > 0) {\n                // draw shadow as a thick and thin line with transparency\n                ctx.lineWidth = sw;\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n                // position shadow at angle from the mid of line\n                var angle = Math.PI/18;\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);\n                ctx.lineWidth = sw/2;\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);\n            }\n\n            ctx.lineWidth = lw;\n            ctx.strokeStyle = series.color;\n            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);\n            if (fillStyle) {\n                ctx.fillStyle = fillStyle;\n                plotLineArea(series.datapoints, series.xaxis, series.yaxis);\n            }\n\n            if (lw > 0)\n                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);\n            ctx.restore();\n        }\n\n        function drawSeriesPoints(series) {\n            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {\n                var points = datapoints.points, ps = datapoints.pointsize;\n\n                for (var i = 0; i < points.length; i += ps) {\n                    var x = points[i], y = points[i + 1];\n                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n                        continue;\n\n                    ctx.beginPath();\n                    x = axisx.p2c(x);\n                    y = axisy.p2c(y) + offset;\n                    if (symbol == \"circle\")\n                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);\n                    else\n                        symbol(ctx, x, y, radius, shadow);\n                    ctx.closePath();\n\n                    if (fillStyle) {\n                        ctx.fillStyle = fillStyle;\n                        ctx.fill();\n                    }\n                    ctx.stroke();\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            var lw = series.points.lineWidth,\n                sw = series.shadowSize,\n                radius = series.points.radius,\n                symbol = series.points.symbol;\n\n            // If the user sets the line width to 0, we change it to a very \n            // small value. A line width of 0 seems to force the default of 1.\n            // Doing the conditional here allows the shadow setting to still be \n            // optional even with a lineWidth of 0.\n\n            if( lw == 0 )\n                lw = 0.0001;\n\n            if (lw > 0 && sw > 0) {\n                // draw shadow in two steps\n                var w = sw / 2;\n                ctx.lineWidth = w;\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n                plotPoints(series.datapoints, radius, null, w + w/2, true,\n                           series.xaxis, series.yaxis, symbol);\n\n                ctx.strokeStyle = \"rgba(0,0,0,0.2)\";\n                plotPoints(series.datapoints, radius, null, w/2, true,\n                           series.xaxis, series.yaxis, symbol);\n            }\n\n            ctx.lineWidth = lw;\n            ctx.strokeStyle = series.color;\n            plotPoints(series.datapoints, radius,\n                       getFillStyle(series.points, series.color), 0, false,\n                       series.xaxis, series.yaxis, symbol);\n            ctx.restore();\n        }\n\n        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {\n            var left, right, bottom, top,\n                drawLeft, drawRight, drawTop, drawBottom,\n                tmp;\n\n            // in horizontal mode, we start the bar from the left\n            // instead of from the bottom so it appears to be\n            // horizontal rather than vertical\n            if (horizontal) {\n                drawBottom = drawRight = drawTop = true;\n                drawLeft = false;\n                left = b;\n                right = x;\n                top = y + barLeft;\n                bottom = y + barRight;\n\n                // account for negative bars\n                if (right < left) {\n                    tmp = right;\n                    right = left;\n                    left = tmp;\n                    drawLeft = true;\n                    drawRight = false;\n                }\n            }\n            else {\n                drawLeft = drawRight = drawTop = true;\n                drawBottom = false;\n                left = x + barLeft;\n                right = x + barRight;\n                bottom = b;\n                top = y;\n\n                // account for negative bars\n                if (top < bottom) {\n                    tmp = top;\n                    top = bottom;\n                    bottom = tmp;\n                    drawBottom = true;\n                    drawTop = false;\n                }\n            }\n\n            // clip\n            if (right < axisx.min || left > axisx.max ||\n                top < axisy.min || bottom > axisy.max)\n                return;\n\n            if (left < axisx.min) {\n                left = axisx.min;\n                drawLeft = false;\n            }\n\n            if (right > axisx.max) {\n                right = axisx.max;\n                drawRight = false;\n            }\n\n            if (bottom < axisy.min) {\n                bottom = axisy.min;\n                drawBottom = false;\n            }\n\n            if (top > axisy.max) {\n                top = axisy.max;\n                drawTop = false;\n            }\n\n            left = axisx.p2c(left);\n            bottom = axisy.p2c(bottom);\n            right = axisx.p2c(right);\n            top = axisy.p2c(top);\n\n            // fill the bar\n            if (fillStyleCallback) {\n                c.fillStyle = fillStyleCallback(bottom, top);\n                c.fillRect(left, top, right - left, bottom - top)\n            }\n\n            // draw outline\n            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {\n                c.beginPath();\n\n                // FIXME: inline moveTo is buggy with excanvas\n                c.moveTo(left, bottom);\n                if (drawLeft)\n                    c.lineTo(left, top);\n                else\n                    c.moveTo(left, top);\n                if (drawTop)\n                    c.lineTo(right, top);\n                else\n                    c.moveTo(right, top);\n                if (drawRight)\n                    c.lineTo(right, bottom);\n                else\n                    c.moveTo(right, bottom);\n                if (drawBottom)\n                    c.lineTo(left, bottom);\n                else\n                    c.moveTo(left, bottom);\n                c.stroke();\n            }\n        }\n\n        function drawSeriesBars(series) {\n            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {\n                var points = datapoints.points, ps = datapoints.pointsize;\n\n                for (var i = 0; i < points.length; i += ps) {\n                    if (points[i] == null)\n                        continue;\n                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            // FIXME: figure out a way to add shadows (for instance along the right edge)\n            ctx.lineWidth = series.bars.lineWidth;\n            ctx.strokeStyle = series.color;\n\n            var barLeft;\n\n            switch (series.bars.align) {\n                case \"left\":\n                    barLeft = 0;\n                    break;\n                case \"right\":\n                    barLeft = -series.bars.barWidth;\n                    break;\n                default:\n                    barLeft = -series.bars.barWidth / 2;\n            }\n\n            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;\n            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);\n            ctx.restore();\n        }\n\n        function getFillStyle(filloptions, seriesColor, bottom, top) {\n            var fill = filloptions.fill;\n            if (!fill)\n                return null;\n\n            if (filloptions.fillColor)\n                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);\n\n            var c = $.color.parse(seriesColor);\n            c.a = typeof fill == \"number\" ? fill : 0.4;\n            c.normalize();\n            return c.toString();\n        }\n\n        function insertLegend() {\n\n            if (options.legend.container != null) {\n                $(options.legend.container).html(\"\");\n            } else {\n                placeholder.find(\".legend\").remove();\n            }\n\n            if (!options.legend.show) {\n                return;\n            }\n\n            var fragments = [], entries = [], rowStarted = false,\n                lf = options.legend.labelFormatter, s, label;\n\n            // Build a list of legend entries, with each having a label and a color\n\n            for (var i = 0; i < series.length; ++i) {\n                s = series[i];\n                if (s.label) {\n                    label = lf ? lf(s.label, s) : s.label;\n                    if (label) {\n                        entries.push({\n                            label: label,\n                            color: s.color\n                        });\n                    }\n                }\n            }\n\n            // Sort the legend using either the default or a custom comparator\n\n            if (options.legend.sorted) {\n                if ($.isFunction(options.legend.sorted)) {\n                    entries.sort(options.legend.sorted);\n                } else if (options.legend.sorted == \"reverse\") {\n                \tentries.reverse();\n                } else {\n                    var ascending = options.legend.sorted != \"descending\";\n                    entries.sort(function(a, b) {\n                        return a.label == b.label ? 0 : (\n                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR\n                        );\n                    });\n                }\n            }\n\n            // Generate markup for the list of entries, in their final order\n\n            for (var i = 0; i < entries.length; ++i) {\n\n                var entry = entries[i];\n\n                if (i % options.legend.noColumns == 0) {\n                    if (rowStarted)\n                        fragments.push('</tr>');\n                    fragments.push('<tr>');\n                    rowStarted = true;\n                }\n\n                fragments.push(\n                    '<td class=\"legendColorBox\"><div style=\"border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px\"><div style=\"width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden\"></div></div></td>' +\n                    '<td class=\"legendLabel\">' + entry.label + '</td>'\n                );\n            }\n\n            if (rowStarted)\n                fragments.push('</tr>');\n\n            if (fragments.length == 0)\n                return;\n\n            var table = '<table style=\"font-size:smaller;color:' + options.grid.color + '\">' + fragments.join(\"\") + '</table>';\n            if (options.legend.container != null)\n                $(options.legend.container).html(table);\n            else {\n                var pos = \"\",\n                    p = options.legend.position,\n                    m = options.legend.margin;\n                if (m[0] == null)\n                    m = [m, m];\n                if (p.charAt(0) == \"n\")\n                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';\n                else if (p.charAt(0) == \"s\")\n                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';\n                if (p.charAt(1) == \"e\")\n                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';\n                else if (p.charAt(1) == \"w\")\n                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';\n                var legend = $('<div class=\"legend\">' + table.replace('style=\"', 'style=\"position:absolute;' + pos +';') + '</div>').appendTo(placeholder);\n                if (options.legend.backgroundOpacity != 0.0) {\n                    // put in the transparent background\n                    // separately to avoid blended labels and\n                    // label boxes\n                    var c = options.legend.backgroundColor;\n                    if (c == null) {\n                        c = options.grid.backgroundColor;\n                        if (c && typeof c == \"string\")\n                            c = $.color.parse(c);\n                        else\n                            c = $.color.extract(legend, 'background-color');\n                        c.a = 1;\n                        c = c.toString();\n                    }\n                    var div = legend.children();\n                    $('<div style=\"position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';\"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);\n                }\n            }\n        }\n\n\n        // interactive features\n\n        var highlights = [],\n            redrawTimeout = null;\n\n        // returns the data item the mouse is over, or null if none is found\n        function findNearbyItem(mouseX, mouseY, seriesFilter) {\n            var maxDistance = options.grid.mouseActiveRadius,\n                smallestDistance = maxDistance * maxDistance + 1,\n                item = null, foundPoint = false, i, j, ps;\n\n            for (i = series.length - 1; i >= 0; --i) {\n                if (!seriesFilter(series[i]))\n                    continue;\n\n                var s = series[i],\n                    axisx = s.xaxis,\n                    axisy = s.yaxis,\n                    points = s.datapoints.points,\n                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster\n                    my = axisy.c2p(mouseY),\n                    maxx = maxDistance / axisx.scale,\n                    maxy = maxDistance / axisy.scale;\n\n                ps = s.datapoints.pointsize;\n                // with inverse transforms, we can't use the maxx/maxy\n                // optimization, sadly\n                if (axisx.options.inverseTransform)\n                    maxx = Number.MAX_VALUE;\n                if (axisy.options.inverseTransform)\n                    maxy = Number.MAX_VALUE;\n\n                if (s.lines.show || s.points.show) {\n                    for (j = 0; j < points.length; j += ps) {\n                        var x = points[j], y = points[j + 1];\n                        if (x == null)\n                            continue;\n\n                        // For points and lines, the cursor must be within a\n                        // certain distance to the data point\n                        if (x - mx > maxx || x - mx < -maxx ||\n                            y - my > maxy || y - my < -maxy)\n                            continue;\n\n                        // We have to calculate distances in pixels, not in\n                        // data units, because the scales of the axes may be different\n                        var dx = Math.abs(axisx.p2c(x) - mouseX),\n                            dy = Math.abs(axisy.p2c(y) - mouseY),\n                            dist = dx * dx + dy * dy; // we save the sqrt\n\n                        // use <= to ensure last point takes precedence\n                        // (last generally means on top of)\n                        if (dist < smallestDistance) {\n                            smallestDistance = dist;\n                            item = [i, j / ps];\n                        }\n                    }\n                }\n\n                if (s.bars.show && !item) { // no other point can be nearby\n\n                    var barLeft, barRight;\n\n                    switch (s.bars.align) {\n                        case \"left\":\n                            barLeft = 0;\n                            break;\n                        case \"right\":\n                            barLeft = -s.bars.barWidth;\n                            break;\n                        default:\n                            barLeft = -s.bars.barWidth / 2;\n                    }\n\n                    barRight = barLeft + s.bars.barWidth;\n\n                    for (j = 0; j < points.length; j += ps) {\n                        var x = points[j], y = points[j + 1], b = points[j + 2];\n                        if (x == null)\n                            continue;\n\n                        // for a bar graph, the cursor must be inside the bar\n                        if (series[i].bars.horizontal ?\n                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&\n                             my >= y + barLeft && my <= y + barRight) :\n                            (mx >= x + barLeft && mx <= x + barRight &&\n                             my >= Math.min(b, y) && my <= Math.max(b, y)))\n                                item = [i, j / ps];\n                    }\n                }\n            }\n\n            if (item) {\n                i = item[0];\n                j = item[1];\n                ps = series[i].datapoints.pointsize;\n\n                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),\n                         dataIndex: j,\n                         series: series[i],\n                         seriesIndex: i };\n            }\n\n            return null;\n        }\n\n        function onMouseMove(e) {\n            if (options.grid.hoverable)\n                triggerClickHoverEvent(\"plothover\", e,\n                                       function (s) { return s[\"hoverable\"] != false; });\n        }\n\n        function onMouseLeave(e) {\n            if (options.grid.hoverable)\n                triggerClickHoverEvent(\"plothover\", e,\n                                       function (s) { return false; });\n        }\n\n        function onClick(e) {\n            triggerClickHoverEvent(\"plotclick\", e,\n                                   function (s) { return s[\"clickable\"] != false; });\n        }\n\n        // trigger click or hover event (they send the same parameters\n        // so we share their code)\n        function triggerClickHoverEvent(eventname, event, seriesFilter) {\n            var offset = eventHolder.offset(),\n                canvasX = event.pageX - offset.left - plotOffset.left,\n                canvasY = event.pageY - offset.top - plotOffset.top,\n            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });\n\n            pos.pageX = event.pageX;\n            pos.pageY = event.pageY;\n\n            var item = findNearbyItem(canvasX, canvasY, seriesFilter);\n\n            if (item) {\n                // fill in mouse pos for any listeners out there\n                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);\n                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);\n            }\n\n            if (options.grid.autoHighlight) {\n                // clear auto-highlights\n                for (var i = 0; i < highlights.length; ++i) {\n                    var h = highlights[i];\n                    if (h.auto == eventname &&\n                        !(item && h.series == item.series &&\n                          h.point[0] == item.datapoint[0] &&\n                          h.point[1] == item.datapoint[1]))\n                        unhighlight(h.series, h.point);\n                }\n\n                if (item)\n                    highlight(item.series, item.datapoint, eventname);\n            }\n\n            placeholder.trigger(eventname, [ pos, item ]);\n        }\n\n        function triggerRedrawOverlay() {\n            var t = options.interaction.redrawOverlayInterval;\n            if (t == -1) {      // skip event queue\n                drawOverlay();\n                return;\n            }\n\n            if (!redrawTimeout)\n                redrawTimeout = setTimeout(drawOverlay, t);\n        }\n\n        function drawOverlay() {\n            redrawTimeout = null;\n\n            // draw highlights\n            octx.save();\n            overlay.clear();\n            octx.translate(plotOffset.left, plotOffset.top);\n\n            var i, hi;\n            for (i = 0; i < highlights.length; ++i) {\n                hi = highlights[i];\n\n                if (hi.series.bars.show)\n                    drawBarHighlight(hi.series, hi.point);\n                else\n                    drawPointHighlight(hi.series, hi.point);\n            }\n            octx.restore();\n\n            executeHooks(hooks.drawOverlay, [octx]);\n        }\n\n        function highlight(s, point, auto) {\n            if (typeof s == \"number\")\n                s = series[s];\n\n            if (typeof point == \"number\") {\n                var ps = s.datapoints.pointsize;\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n            }\n\n            var i = indexOfHighlight(s, point);\n            if (i == -1) {\n                highlights.push({ series: s, point: point, auto: auto });\n\n                triggerRedrawOverlay();\n            }\n            else if (!auto)\n                highlights[i].auto = false;\n        }\n\n        function unhighlight(s, point) {\n            if (s == null && point == null) {\n                highlights = [];\n                triggerRedrawOverlay();\n                return;\n            }\n\n            if (typeof s == \"number\")\n                s = series[s];\n\n            if (typeof point == \"number\") {\n                var ps = s.datapoints.pointsize;\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n            }\n\n            var i = indexOfHighlight(s, point);\n            if (i != -1) {\n                highlights.splice(i, 1);\n\n                triggerRedrawOverlay();\n            }\n        }\n\n        function indexOfHighlight(s, p) {\n            for (var i = 0; i < highlights.length; ++i) {\n                var h = highlights[i];\n                if (h.series == s && h.point[0] == p[0]\n                    && h.point[1] == p[1])\n                    return i;\n            }\n            return -1;\n        }\n\n        function drawPointHighlight(series, point) {\n            var x = point[0], y = point[1],\n                axisx = series.xaxis, axisy = series.yaxis,\n                highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();\n\n            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n                return;\n\n            var pointRadius = series.points.radius + series.points.lineWidth / 2;\n            octx.lineWidth = pointRadius;\n            octx.strokeStyle = highlightColor;\n            var radius = 1.5 * pointRadius;\n            x = axisx.p2c(x);\n            y = axisy.p2c(y);\n\n            octx.beginPath();\n            if (series.points.symbol == \"circle\")\n                octx.arc(x, y, radius, 0, 2 * Math.PI, false);\n            else\n                series.points.symbol(octx, x, y, radius, false);\n            octx.closePath();\n            octx.stroke();\n        }\n\n        function drawBarHighlight(series, point) {\n            var highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),\n                fillStyle = highlightColor,\n                barLeft;\n\n            switch (series.bars.align) {\n                case \"left\":\n                    barLeft = 0;\n                    break;\n                case \"right\":\n                    barLeft = -series.bars.barWidth;\n                    break;\n                default:\n                    barLeft = -series.bars.barWidth / 2;\n            }\n\n            octx.lineWidth = series.bars.lineWidth;\n            octx.strokeStyle = highlightColor;\n\n            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,\n                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);\n        }\n\n        function getColorOrGradient(spec, bottom, top, defaultColor) {\n            if (typeof spec == \"string\")\n                return spec;\n            else {\n                // assume this is a gradient spec; IE currently only\n                // supports a simple vertical gradient properly, so that's\n                // what we support too\n                var gradient = ctx.createLinearGradient(0, top, 0, bottom);\n\n                for (var i = 0, l = spec.colors.length; i < l; ++i) {\n                    var c = spec.colors[i];\n                    if (typeof c != \"string\") {\n                        var co = $.color.parse(defaultColor);\n                        if (c.brightness != null)\n                            co = co.scale('rgb', c.brightness);\n                        if (c.opacity != null)\n                            co.a *= c.opacity;\n                        c = co.toString();\n                    }\n                    gradient.addColorStop(i / (l - 1), c);\n                }\n\n                return gradient;\n            }\n        }\n    }\n\n    // Add the plot function to the top level of the jQuery object\n\n    $.plot = function(placeholder, data, options) {\n        //var t0 = new Date();\n        var plot = new Plot($(placeholder), data, options, $.plot.plugins);\n        //(window.console ? console.log : alert)(\"time used (msecs): \" + ((new Date()).getTime() - t0.getTime()));\n        return plot;\n    };\n\n    $.plot.version = \"0.8.3\";\n\n    $.plot.plugins = [];\n\n    // Also add the plot function as a chainable property\n\n    $.fn.plot = function(data, options) {\n        return this.each(function() {\n            $.plot(this, data, options);\n        });\n    };\n\n    // round to nearby lower multiple of base\n    function floorInBase(n, base) {\n        return base * Math.floor(n / base);\n    }\n\n})(jQuery);\n"]}]}